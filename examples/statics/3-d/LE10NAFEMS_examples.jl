module LE10NAFEMS_examples
using FinEtools
using FinEtools.MeshExportModule
using FinEtools.MeshImportModule
using FinEtools.AlgoBaseModule: evalconvergencestudy
using FinEtools.AlgoDeforLinearModule: linearstatics, exportstresselementwise, exportstress
using LinearAlgebra: cholesky

function LE10NAFEMS_Abaqus_fine_MST10()
    # Thick elliptical plate with an elliptical hole is clamped on its exterior
    # boundary and is loaded with transverse  pressure.
    # This is a NAFEMS Benchmark, Test No. LE10.
    # The plate is discretized with solid elements.
    # Because of the symmetries of the geometry and load, only quarter of the plate is modeled.
    # The $\sigma_y=\sigma_2$ at the point $P$ is to be determined. Since the
    # target point is on the boundary of the domain it will not be an
    # integration node as we use Gauss quadrature. The reference value is -5.38 MPa.
    
    println("LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole."        )
    t0 = time()
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    tolerance = Thickness/1000.; # Geometrical tolerance
    
    INP_file = """
    *HEADING
    NAFEMS TEST NLE10, REFINED MESH, C3D10HS ELEMENTS --
    **
    **RESTART, WRITE, FREQUENCY=1
    **
    *NODE
    1,          0.,        2.75
    2,          0.,     2.45825
    3,          0.,      2.1665
    4,          0.,     1.87475
    5,          0.,       1.583
    6,    0.349721,     1.84088
    7,    0.464205,      2.7218
    8,    0.407787,     2.14399
    9,    0.351377,     1.56618
    10,    0.460635,     2.40185
    11,     0.92127,      2.6372
    12,    0.865807,     2.35672
    13,    0.810348,     2.07624
    14,    0.754893,     1.79575
    15,    0.699442,     1.51527
    16,     1.24873,     2.21951
    17,     1.36358,      2.4963
    18,     1.20166,     1.96267
    19,      1.0404,     1.42884
    20,     1.13781,     1.65854
    21,       1.783,     2.29921
    22,     1.67959,     2.05051
    23,     1.57618,     1.80182
    24,     1.47278,     1.55312
    25,     1.36937,     1.30443
    26,          0.,        2.75,        0.15
    27,          0.,     2.45825,        0.15
    28,          0.,      2.1665,        0.15
    29,          0.,     1.87475,        0.15
    30,          0.,       1.583,        0.15
    31,     0.46408,     2.72182,        0.15
    32,    0.407685,     2.14401,        0.15
    33,    0.351362,     1.56618,        0.15
    34,     0.92127,      2.6372,        0.15
    35,    0.865839,     2.35671,    0.150001
    36,    0.810348,     2.07624,        0.15
    37,    0.754865,     1.79576,        0.15
    38,    0.699442,     1.51527,        0.15
    39,     1.36318,     2.49645,        0.15
    40,      1.2017,     1.96266,        0.15
    41,     1.04034,     1.42886,        0.15
    42,       1.783,     2.29921,        0.15
    43,     1.67959,     2.05051,        0.15
    44,     1.57618,     1.80182,        0.15
    45,     1.47278,     1.55312,        0.15
    46,     1.36937,     1.30443,        0.15
    47,          0.,        2.75,         0.3
    48,          0.,     2.45825,         0.3
    49,          0.,      2.1665,         0.3
    50,          0.,     1.87475,         0.3
    51,          0.,       1.583,         0.3
    52,    0.405174,     2.41312,         0.3
    53,    0.464205,      2.7218,         0.3
    54,    0.407787,     2.14399,         0.3
    55,    0.351377,     1.56618,         0.3
    56,    0.405174,     1.82962,         0.3
    57,     0.92127,      2.6372,         0.3
    58,    0.865807,     2.35672,         0.3
    59,    0.810348,     2.07624,         0.3
    60,    0.754893,     1.79575,         0.3
    61,    0.699442,     1.51527,         0.3
    62,     1.08986,     1.69033,         0.3
    63,     1.36358,      2.4963,         0.3
    64,     1.20166,     1.96267,         0.3
    65,      1.0404,     1.42884,         0.3
    66,     1.29667,     2.18772,         0.3
    67,       1.783,     2.29921,         0.3
    68,     1.67959,     2.05051,         0.3
    69,     1.57618,     1.80182,         0.3
    70,     1.47278,     1.55312,         0.3
    71,     1.36937,     1.30443,         0.3
    72,          0.,        2.75,        0.45
    73,          0.,     2.45825,        0.45
    74,          0.,      2.1665,        0.45
    75,          0.,     1.87475,        0.45
    76,          0.,       1.583,        0.45
    77,     0.46408,     2.72182,        0.45
    78,    0.407685,     2.14401,        0.45
    79,    0.351362,     1.56618,        0.45
    80,     0.92127,      2.6372,        0.45
    81,    0.865774,     2.35673,        0.45
    82,    0.810348,     2.07624,        0.45
    83,    0.754921,     1.79575,        0.45
    84,    0.699442,     1.51527,        0.45
    85,     1.36318,     2.49645,        0.45
    86,      1.2017,     1.96266,        0.45
    87,     1.04034,     1.42886,        0.45
    88,       1.783,     2.29921,        0.45
    89,     1.67959,     2.05051,        0.45
    90,     1.57618,     1.80182,        0.45
    91,     1.47278,     1.55312,        0.45
    92,     1.36937,     1.30443,        0.45
    93,          0.,        2.75,         0.6
    94,          0.,     2.45825,         0.6
    95,          0.,      2.1665,         0.6
    96,          0.,     1.87475,         0.6
    97,          0.,       1.583,         0.6
    98,    0.349721,     1.84088,         0.6
    99,    0.464205,      2.7218,         0.6
    100,    0.407787,     2.14399,         0.6
    101,    0.351377,     1.56618,         0.6
    102,    0.460635,     2.40185,         0.6
    103,     0.92127,      2.6372,         0.6
    104,    0.865807,     2.35672,         0.6
    105,    0.810348,     2.07624,         0.6
    106,    0.754893,     1.79575,         0.6
    107,    0.699442,     1.51527,         0.6
    108,     1.24873,     2.21951,         0.6
    109,     1.36358,      2.4963,         0.6
    110,     1.20166,     1.96267,         0.6
    111,      1.0404,     1.42884,         0.6
    112,     1.13781,     1.65854,         0.6
    113,       1.783,     2.29921,         0.6
    114,     1.67959,     2.05051,         0.6
    115,     1.57618,     1.80182,         0.6
    116,     1.47278,     1.55312,         0.6
    117,     1.36937,     1.30443,         0.6
    119,          0.,     1.43725
    120,          0.,      1.2915
    121,          0.,     1.14575
    122,          0.,          1.
    123,    0.295266,     1.12346
    125,    0.323749,     1.27758
    126,     0.29612,    0.988978
    127,    0.349721,     1.40338
    129,    0.672214,      1.3753
    130,    0.644987,     1.23534
    131,    0.617759,     1.09538
    132,    0.590531,    0.955415
    133,    0.983313,     1.28695
    135,    0.960781,     1.16328
    136,    0.881158,    0.897714
    137,    0.928857,     1.00702
    139,     1.31828,     1.18153
    140,     1.26718,     1.05863
    141,     1.21609,     0.93573
    142,       1.165,    0.812831
    144,          0.,     1.43725,        0.15
    145,          0.,      1.2915,        0.15
    146,          0.,     1.14575,        0.15
    147,          0.,          1.,        0.15
    149,    0.323718,     1.27758,        0.15
    150,    0.296109,    0.988979,        0.15
    152,    0.672215,      1.3753,        0.15
    153,    0.644987,     1.23534,        0.15
    154,    0.617759,     1.09538,        0.15
    155,    0.590531,    0.955415,        0.15
    157,    0.960677,      1.1633,        0.15
    158,    0.881104,    0.897727,        0.15
    160,     1.31828,     1.18153,        0.15
    161,     1.26718,     1.05863,        0.15
    162,     1.21609,     0.93573,        0.15
    163,       1.165,    0.812831,        0.15
    165,          0.,     1.43725,         0.3
    166,          0.,      1.2915,         0.3
    167,          0.,     1.14575,         0.3
    168,          0.,          1.,         0.3
    169,    0.322493,     1.40917,         0.3
    171,    0.323749,     1.27758,         0.3
    172,     0.29612,    0.988978,         0.3
    173,    0.322493,     1.11767,         0.3
    175,    0.672214,      1.3753,         0.3
    176,    0.644987,     1.23534,         0.3
    177,    0.617759,     1.09538,         0.3
    178,    0.590531,    0.955415,         0.3
    179,    0.904993,     1.02409,         0.3
    181,    0.960781,     1.16328,         0.3
    182,    0.881158,    0.897714,         0.3
    183,     1.00718,     1.26988,         0.3
    185,     1.31828,     1.18153,         0.3
    186,     1.26718,     1.05863,         0.3
    187,     1.21609,     0.93573,         0.3
    188,       1.165,    0.812831,         0.3
    190,          0.,     1.43725,        0.45
    191,          0.,      1.2915,        0.45
    192,          0.,     1.14575,        0.45
    193,          0.,          1.,        0.45
    195,    0.323718,     1.27758,        0.45
    196,    0.296109,    0.988979,        0.45
    198,    0.672214,      1.3753,        0.45
    199,    0.644987,     1.23534,        0.45
    200,    0.617759,     1.09538,        0.45
    201,    0.590531,    0.955415,        0.45
    203,    0.960677,      1.1633,        0.45
    204,    0.881104,    0.897727,        0.45
    206,     1.31828,     1.18153,        0.45
    207,     1.26718,     1.05863,        0.45
    208,     1.21609,     0.93573,        0.45
    209,       1.165,    0.812831,        0.45
    211,          0.,     1.43725,         0.6
    212,          0.,      1.2915,         0.6
    213,          0.,     1.14575,         0.6
    214,          0.,          1.,         0.6
    215,    0.295266,     1.12346,         0.6
    217,    0.323749,     1.27758,         0.6
    218,     0.29612,    0.988978,         0.6
    219,    0.349721,     1.40338,         0.6
    221,    0.672214,      1.3753,         0.6
    222,    0.644987,     1.23534,         0.6
    223,    0.617759,     1.09538,         0.6
    224,    0.590531,    0.955415,         0.6
    225,    0.983313,     1.28695,         0.6
    227,    0.960781,     1.16328,         0.6
    228,    0.881158,    0.897714,         0.6
    229,    0.928857,     1.00702,         0.6
    231,     1.31828,     1.18153,         0.6
    232,     1.26718,     1.05863,         0.6
    233,     1.21609,     0.93573,         0.6
    234,       1.165,    0.812831,         0.6
    240,     1.67882,     1.43583
    241,     2.08558,     2.10909
    242,     1.83339,     1.65317
    243,     1.58119,     1.19726
    244,     1.97057,     1.84405
    245,     2.36495,     1.88628
    246,     2.21908,     1.68217
    247,      2.0732,     1.47806
    248,     1.92733,     1.27395
    249,     1.78146,     1.06984
    250,     2.42305,     1.46733
    251,     2.61589,     1.63192
    252,     2.29099,     1.27633
    253,      1.9661,    0.920737
    254,     2.13131,     1.05911
    255,     2.83277,       1.348
    256,     2.65696,     1.19818
    257,     2.48116,     1.04837
    258,     2.30535,    0.898553
    259,     2.12955,    0.748738
    265,     2.08556,     2.10911,        0.15
    266,     1.83332,     1.65322,        0.15
    267,     1.58116,     1.19728,        0.15
    268,     2.36495,     1.88628,        0.15
    269,     2.21908,     1.68217,        0.15
    270,      2.0732,     1.47806,        0.15
    271,     1.92733,     1.27395,        0.15
    272,     1.78146,     1.06984,        0.15
    273,     2.61586,     1.63196,        0.15
    274,     2.29096,     1.27636,        0.15
    275,     1.96604,    0.920794,        0.15
    276,     2.83277,       1.348,        0.15
    277,     2.65696,     1.19818,        0.15
    278,     2.48116,     1.04837,        0.15
    279,     2.30535,    0.898553,        0.15
    280,     2.12955,    0.748738,        0.15
    286,      1.9281,     1.88863,         0.3
    287,     2.08558,     2.10909,         0.3
    288,     1.83339,     1.65317,         0.3
    289,     1.58119,     1.19726,         0.3
    290,     1.72129,     1.39125,         0.3
    291,     2.36495,     1.88628,         0.3
    292,     2.21908,     1.68217,         0.3
    293,      2.0732,     1.47806,         0.3
    294,     1.92733,     1.27395,         0.3
    295,     1.78146,     1.06984,         0.3
    296,     2.10137,      1.1134,         0.3
    297,     2.61589,     1.63192,         0.3
    298,     2.29099,     1.27633,         0.3
    299,      1.9661,    0.920737,         0.3
    300,     2.45298,     1.41303,         0.3
    301,     2.83277,       1.348,         0.3
    302,     2.65696,     1.19818,         0.3
    303,     2.48116,     1.04837,         0.3
    304,     2.30535,    0.898553,         0.3
    305,     2.12955,    0.748738,         0.3
    311,     2.08556,     2.10911,        0.45
    312,     1.83332,     1.65322,        0.45
    313,     1.58116,     1.19728,        0.45
    314,     2.36495,     1.88628,        0.45
    315,     2.21908,     1.68217,        0.45
    316,      2.0732,     1.47806,        0.45
    317,     1.92733,     1.27395,        0.45
    318,     1.78146,     1.06984,        0.45
    319,     2.61586,     1.63196,        0.45
    320,     2.29096,     1.27636,        0.45
    321,     1.96604,    0.920794,        0.45
    322,     2.83277,       1.348,        0.45
    323,     2.65696,     1.19818,        0.45
    324,     2.48116,     1.04837,        0.45
    325,     2.30535,    0.898553,        0.45
    326,     2.12955,    0.748738,        0.45
    332,     1.67882,     1.43583,         0.6
    333,     2.08558,     2.10909,         0.6
    334,     1.83339,     1.65317,         0.6
    335,     1.58119,     1.19726,         0.6
    336,     1.97057,     1.84405,         0.6
    337,     2.36495,     1.88628,         0.6
    338,     2.21908,     1.68217,         0.6
    339,      2.0732,     1.47806,         0.6
    340,     1.92733,     1.27395,         0.6
    341,     1.78146,     1.06984,         0.6
    342,     2.42305,     1.46733,         0.6
    343,     2.61589,     1.63192,         0.6
    344,     2.29099,     1.27633,         0.6
    345,      1.9661,    0.920737,         0.6
    346,     2.13131,     1.05911,         0.6
    347,     2.83277,       1.348,         0.6
    348,     2.65696,     1.19818,         0.6
    349,     2.48116,     1.04837,         0.6
    350,     2.30535,    0.898553,         0.6
    351,     2.12955,    0.748738,         0.6
    357,      1.3802,    0.861948
    359,     1.45669,    0.971566
    360,     1.33218,     0.74587
    361,     1.52432,     1.06424
    363,      1.7094,      0.9687
    364,     1.63734,    0.867555
    365,     1.56528,     0.76641
    366,     1.49321,    0.665266
    367,     1.86887,    0.835357
    369,     1.80562,      0.7447
    370,     1.64514,    0.568662
    371,     1.72475,    0.633067
    373,     2.04291,    0.674803
    374,     1.95628,    0.600869
    375,     1.86965,    0.526934
    376,     1.78302,       0.453
    383,     1.45663,    0.971598,        0.15
    384,     1.33216,    0.745881,        0.15
    386,      1.7094,      0.9687,        0.15
    387,     1.63734,    0.867555,        0.15
    388,     1.56527,    0.766411,        0.15
    389,     1.49321,    0.665266,        0.15
    391,     1.80555,    0.744761,        0.15
    392,     1.64506,    0.568725,        0.15
    394,     2.04291,    0.674803,        0.15
    395,     1.95628,    0.600869,        0.15
    396,     1.86965,    0.526934,        0.15
    397,     1.78302,       0.453,        0.15
    403,     1.50335,     1.08599,         0.3
    405,     1.45669,    0.971566,         0.3
    406,     1.33218,     0.74587,         0.3
    407,     1.40117,    0.840193,         0.3
    409,      1.7094,      0.9687,         0.3
    410,     1.63734,    0.867555,         0.3
    411,     1.56528,     0.76641,         0.3
    412,     1.49321,    0.665266,         0.3
    413,     1.71018,    0.660278,         0.3
    415,     1.80562,      0.7447,         0.3
    416,     1.64514,    0.568662,         0.3
    417,     1.88344,    0.808146,         0.3
    419,     2.04291,    0.674803,         0.3
    420,     1.95628,    0.600869,         0.3
    421,     1.86965,    0.526934,         0.3
    422,     1.78302,       0.453,         0.3
    429,     1.45663,    0.971598,        0.45
    430,     1.33216,    0.745881,        0.45
    432,      1.7094,      0.9687,        0.45
    433,     1.63734,    0.867555,        0.45
    434,     1.56528,     0.76641,        0.45
    435,     1.49321,    0.665266,        0.45
    437,     1.80555,    0.744761,        0.45
    438,     1.64506,    0.568725,        0.45
    440,     2.04291,    0.674803,        0.45
    441,     1.95628,    0.600869,        0.45
    442,     1.86965,    0.526934,        0.45
    443,     1.78302,       0.453,        0.45
    449,      1.3802,    0.861948,         0.6
    451,     1.45669,    0.971566,         0.6
    452,     1.33218,     0.74587,         0.6
    453,     1.52432,     1.06424,         0.6
    455,      1.7094,      0.9687,         0.6
    456,     1.63734,    0.867555,         0.6
    457,     1.56528,     0.76641,         0.6
    458,     1.49321,    0.665266,         0.6
    459,     1.86887,    0.835357,         0.6
    461,     1.80562,      0.7447,         0.6
    462,     1.64514,    0.568662,         0.6
    463,     1.72475,    0.633067,         0.6
    465,     2.04291,    0.674803,         0.6
    466,     1.95628,    0.600869,         0.6
    467,     1.86965,    0.526934,         0.6
    468,     1.78302,       0.453,         0.6
    474,     1.94695,    0.424348
    475,     2.24798,     0.58156
    476,     2.05826,    0.469066
    477,     1.86854,    0.356567
    478,     2.14776,    0.499577
    479,     2.33925,    0.398285
    480,     2.23884,    0.360673
    481,     2.13843,    0.323059
    482,     2.03802,    0.285444
    483,     1.93761,    0.247826
    484,     2.27387,    0.199143
    485,     2.39752,    0.202727
    486,     2.19052,    0.165412
    487,     1.98365,    0.127605
    488,     2.07305,    0.123912
    489,       2.417,          0.
    490,     2.31275,          0.
    491,      2.2085,          0.
    492,     2.10425,          0.
    493,          2.,          0.
    499,     2.24792,    0.581668,        0.15
    500,      2.0582,     0.46915,        0.15
    501,     1.86848,    0.356646,        0.15
    502,     2.33925,    0.398285,        0.15
    503,     2.23884,    0.360665,        0.15
    504,     2.13843,    0.323059,        0.15
    505,     2.03801,     0.28545,        0.15
    506,     1.93761,    0.247826,        0.15
    507,      2.3973,    0.203669,        0.15
    508,     2.19046,     0.16566,        0.15
    509,     1.98362,    0.127728,        0.15
    510,       2.417,          0.,        0.15
    511,     2.31275,          0.,        0.15
    512,      2.2085,          0.,        0.15
    513,     2.10425,          0.,        0.15
    514,          2.,          0.,        0.15
    520,     2.13399,    0.535899,         0.3
    521,     2.24798,     0.58156,         0.3
    522,     2.05826,    0.469066,         0.3
    523,     1.86854,    0.356567,         0.3
    524,     1.96072,     0.38803,         0.3
    525,     2.33925,    0.398285,         0.3
    526,     2.23884,    0.360673,         0.3
    527,     2.13843,    0.323059,         0.3
    528,     2.03802,    0.285444,         0.3
    529,     1.93761,    0.247826,         0.3
    530,     2.06921,     0.16153,         0.3
    531,     2.39752,    0.202727,         0.3
    532,     2.19052,    0.165412,         0.3
    533,     1.98365,    0.127605,         0.3
    534,     2.27771,     0.16153,         0.3
    535,       2.417,          0.,         0.3
    536,     2.31275,          0.,         0.3
    537,      2.2085,          0.,         0.3
    538,     2.10425,          0.,         0.3
    539,          2.,          0.,         0.3
    545,     2.24792,    0.581668,        0.45
    546,      2.0582,     0.46915,        0.45
    547,     1.86848,    0.356646,        0.45
    548,     2.33925,    0.398285,        0.45
    549,     2.23883,    0.360682,        0.45
    550,     2.13843,    0.323059,        0.45
    551,     2.03802,    0.285437,        0.45
    552,     1.93761,    0.247826,        0.45
    553,      2.3973,    0.203669,        0.45
    554,     2.19046,     0.16566,        0.45
    555,     1.98362,    0.127728,        0.45
    556,       2.417,          0.,        0.45
    557,     2.31275,          0.,        0.45
    558,      2.2085,          0.,        0.45
    559,     2.10425,          0.,        0.45
    560,          2.,          0.,        0.45
    566,     1.94695,    0.424348,         0.6
    567,     2.24798,     0.58156,         0.6
    568,     2.05826,    0.469066,         0.6
    569,     1.86854,    0.356567,         0.6
    570,     2.14776,    0.499577,         0.6
    571,     2.33925,    0.398285,         0.6
    572,     2.23884,    0.360673,         0.6
    573,     2.13843,    0.323059,         0.6
    574,     2.03802,    0.285444,         0.6
    575,     1.93761,    0.247826,         0.6
    576,     2.27387,    0.199143,         0.6
    577,     2.39752,    0.202727,         0.6
    578,     2.19052,    0.165412,         0.6
    579,     1.98365,    0.127605,         0.6
    580,     2.07305,    0.123912,         0.6
    581,       2.417,          0.,         0.6
    582,     2.31275,          0.,         0.6
    583,      2.2085,          0.,         0.6
    584,     2.10425,          0.,         0.6
    585,          2.,          0.,         0.6
    591,      2.4102,    0.723327
    592,     3.00992,     1.03732
    593,     2.62895,    0.809437
    595,     2.81131,    0.876575
    596,     3.14145,    0.704781
    597,      2.9409,    0.628151
    598,     2.74035,    0.551525
    599,      2.5398,    0.474903
    601,     2.98748,    0.352391
    603,     3.22257,    0.356518
    604,     2.81014,    0.279227
    605,     2.58637,    0.199143
    606,        3.25,          0.
    607,     3.04175,          0.
    608,      2.8335,          0.
    609,     2.62525,          0.
    616,      3.0099,     1.03736,        0.15
    617,     2.62893,    0.809477,        0.15
    619,     3.14145,    0.704781,        0.15
    620,      2.9409,    0.628168,        0.15
    621,     2.74035,    0.551525,        0.15
    622,     2.53981,     0.47489,        0.15
    625,        2.81,    0.279967,        0.15
    626,     3.22257,    0.356538,        0.15
    627,        3.25,          0.,        0.15
    628,     3.04175,          0.,        0.15
    629,      2.8335,          0.,        0.15
    630,     2.62525,          0.,        0.15
    637,     2.78656,    0.949762,         0.3
    638,     3.00992,     1.03732,         0.3
    639,     2.62895,    0.809437,         0.3
    641,     2.43495,    0.650131,         0.3
    642,     3.14145,    0.704781,         0.3
    643,      2.9409,    0.628151,         0.3
    644,     2.74035,    0.551525,         0.3
    645,      2.5398,    0.474903,         0.3
    647,     2.57868,    0.275762,         0.3
    648,     3.22257,    0.356518,         0.3
    650,     2.81014,    0.279227,         0.3
    651,     2.99518,    0.275762,         0.3
    652,        3.25,          0.,         0.3
    653,     3.04175,          0.,         0.3
    654,      2.8335,          0.,         0.3
    655,     2.62525,          0.,         0.3
    662,      3.0099,     1.03736,        0.45
    663,     2.62893,    0.809477,        0.45
    665,     3.14145,    0.704781,        0.45
    666,     2.94091,    0.628134,        0.45
    667,     2.74035,    0.551525,        0.45
    668,      2.5398,    0.474916,        0.45
    671,        2.81,    0.279967,        0.45
    672,     3.22257,    0.356538,        0.45
    673,        3.25,          0.,        0.45
    674,     3.04175,          0.,        0.45
    675,      2.8335,          0.,        0.45
    676,     2.62525,          0.,        0.45
    683,      2.4102,    0.723327,         0.6
    684,     3.00992,     1.03732,         0.6
    685,     2.62895,    0.809437,         0.6
    687,     2.81131,    0.876575,         0.6
    688,     3.14145,    0.704781,         0.6
    689,      2.9409,    0.628151,         0.6
    690,     2.74035,    0.551525,         0.6
    691,      2.5398,    0.474903,         0.6
    693,     2.98748,    0.352391,         0.6
    695,     3.22257,    0.356518,         0.6
    696,     2.81014,    0.279227,         0.6
    697,     2.58637,    0.199143,         0.6
    698,        3.25,          0.,         0.6
    699,     3.04175,          0.,         0.6
    700,      2.8335,          0.,         0.6
    701,     2.62525,          0.,         0.6
    **
    **
    *ELEMENT, TYPE=C3D10HS, ELSET=EALL
    1,       1,      11,      47,       3,       7,      31,      26,
    2,      10,      27
    2,      57,      47,      11,      59,      53,      31,      34,
    58,      52,      35
    3,      13,       3,      59,      11,       8,      32,      36,
    12,      10,      35
    4,      49,      59,       3,      47,      54,      32,      28,
    48,      52,      27
    5,       3,      11,      47,      59,      10,      31,      27,
    32,      35,      52
    6,      13,      59,       3,      15,      36,      32,       8,
    14,      37,       6
    7,      49,       3,      59,      51,      28,      32,      54,
    50,      29,      56
    8,       5,      51,      15,       3,      30,      33,       9,
    4,      29,       6
    9,      61,      15,      51,      59,      38,      33,      55,
    60,      37,      56
    10,       3,      15,      59,      51,       6,      37,      32,
    29,      33,      56
    11,      21,      67,      11,      23,      42,      39,      17,
    22,      43,      16
    12,      57,      11,      67,      59,      34,      39,      63,
    58,      35,      66
    13,      13,      59,      23,      11,      36,      40,      18,
    12,      35,      16
    14,      69,      23,      59,      67,      44,      40,      64,
    68,      43,      66
    15,      11,      23,      67,      59,      16,      43,      39,
    35,      40,      66
    16,      13,      23,      59,      15,      18,      40,      36,
    14,      20,      37
    17,      69,      59,      23,      71,      64,      40,      44,
    70,      62,      45
    18,      25,      15,      71,      23,      19,      41,      46,
    24,      20,      45
    19,      61,      71,      15,      59,      65,      41,      38,
    60,      62,      37
    20,      15,      23,      59,      71,      20,      40,      37,
    41,      45,      62
    21,      57,     103,      47,      59,      80,      77,      53,
    58,      81,      52
    22,      93,      47,     103,      95,      72,      77,      99,
    94,      73,     102
    23,      49,      95,      59,      47,      74,      78,      54,
    48,      73,      52
    24,     105,      59,      95,     103,      82,      78,     100,
    104,      81,     102
    25,      47,      59,     103,      95,      52,      81,      77,
    73,      78,     102
    26,      49,      59,      95,      51,      54,      78,      74,
    50,      56,      75
    27,     105,      95,      59,     107,     100,      78,      82,
    106,      98,      83
    28,      61,      51,     107,      59,      55,      79,      84,
    60,      56,      83
    29,      97,     107,      51,      95,     101,      79,      76,
    96,      98,      75
    30,      51,      59,      95,     107,      56,      78,      75,
    79,      83,      98
    31,      57,      67,     103,      59,      63,      85,      80,
    58,      66,      81
    32,     113,     103,      67,     115,     109,      85,      88,
    114,     108,      89
    33,      69,      59,     115,      67,      64,      86,      90,
    68,      66,      89
    34,     105,     115,      59,     103,     110,      86,      82,
    104,     108,      81
    35,      59,      67,     103,     115,      66,      85,      81,
    86,      89,     108
    36,      69,     115,      59,      71,      90,      86,      64,
    70,      91,      62
    37,     105,      59,     115,     107,      82,      86,     110,
    106,      83,     112
    38,      61,     107,      71,      59,      84,      87,      65,
    60,      83,      62
    39,     117,      71,     107,     115,      92,      87,     111,
    116,      91,     112
    40,      59,      71,     115,     107,      62,      91,      86,
    83,      87,     112
    41,       5,      15,      51,     120,       9,      33,      30,
    119,     127,     144
    42,      61,      51,      15,     176,      55,      33,      38,
    175,     169,     152
    43,     130,     120,     176,      15,     125,     149,     153,
    129,     127,     152
    44,     166,     176,     120,      51,     171,     149,     145,
    165,     169,     144
    45,     120,      15,      51,     176,     127,      33,     144,
    149,     152,     169
    46,     130,     176,     120,     132,     153,     149,     125,
    131,     154,     123
    47,     166,     120,     176,     168,     145,     149,     171,
    167,     146,     173
    48,     122,     168,     132,     120,     147,     150,     126,
    121,     146,     123
    49,     178,     132,     168,     176,     155,     150,     172,
    177,     154,     173
    50,     120,     132,     176,     168,     123,     154,     149,
    146,     150,     173
    51,      25,      71,      15,     140,      46,      41,      19,
    139,     160,     133
    52,      61,      15,      71,     176,      38,      41,      65,
    175,     152,     183
    53,     130,     176,     140,      15,     153,     157,     135,
    129,     152,     133
    54,     186,     140,     176,      71,     161,     157,     181,
    185,     160,     183
    55,      15,     140,      71,     176,     133,     160,      41,
    152,     157,     183
    56,     130,     140,     176,     132,     135,     157,     153,
    131,     137,     154
    57,     186,     176,     140,     188,     181,     157,     161,
    187,     179,     162
    58,     142,     132,     188,     140,     136,     158,     163,
    141,     137,     162
    59,     178,     188,     132,     176,     182,     158,     155,
    177,     179,     154
    60,     132,     140,     176,     188,     137,     157,     154,
    158,     162,     179
    61,      61,     107,      51,     176,      84,      79,      55,
    175,     198,     169
    62,      97,      51,     107,     212,      76,      79,     101,
    211,     190,     219
    63,     166,     212,     176,      51,     191,     195,     171,
    165,     190,     169
    64,     222,     176,     212,     107,     199,     195,     217,
    221,     198,     219
    65,      51,     176,     107,     212,     169,     198,      79,
    190,     195,     219
    66,     166,     176,     212,     168,     171,     195,     191,
    167,     173,     192
    67,     222,     212,     176,     224,     217,     195,     199,
    223,     215,     200
    68,     178,     168,     224,     176,     172,     196,     201,
    177,     173,     200
    69,     214,     224,     168,     212,     218,     196,     193,
    213,     215,     192
    70,     168,     176,     212,     224,     173,     195,     192,
    196,     200,     215
    71,      61,      71,     107,     176,      65,      87,      84,
    175,     183,     198
    72,     117,     107,      71,     232,     111,      87,      92,
    231,     225,     206
    73,     186,     176,     232,      71,     181,     203,     207,
    185,     183,     206
    74,     222,     232,     176,     107,     227,     203,     199,
    221,     225,     198
    75,     176,      71,     107,     232,     183,      87,     198,
    203,     206,     225
    76,     186,     232,     176,     188,     207,     203,     181,
    187,     208,     179
    77,     222,     176,     232,     224,     199,     203,     227,
    223,     200,     229
    78,     178,     224,     188,     176,     201,     204,     182,
    177,     200,     179
    79,     234,     188,     224,     232,     209,     204,     228,
    233,     208,     229
    80,     176,     188,     232,     224,     179,     208,     203,
    200,     204,     229
    81,      21,     245,      67,      23,     241,     265,      42,
    22,     244,      43
    82,     291,      67,     245,     293,     287,     265,     268,
    292,     286,     269
    83,     247,      23,     293,     245,     242,     266,     270,
    246,     244,     269
    84,      69,     293,      23,      67,     288,     266,      44,
    68,     286,      43
    85,      23,     245,      67,     293,     244,     265,      43,
    266,     269,     286
    86,     247,     293,      23,     249,     270,     266,     242,
    248,     271,     240
    87,      69,      23,     293,      71,      44,     266,     288,
    70,      45,     290
    88,      25,      71,     249,      23,      46,     267,     243,
    24,      45,     240
    89,     295,     249,      71,     293,     272,     267,     289,
    294,     271,     290
    90,      23,     249,     293,      71,     240,     271,     266,
    45,     267,     290
    91,     255,     301,     245,     257,     276,     273,     251,
    256,     277,     250
    92,     291,     245,     301,     293,     268,     273,     297,
    292,     269,     300
    93,     247,     293,     257,     245,     270,     274,     252,
    246,     269,     250
    94,     303,     257,     293,     301,     278,     274,     298,
    302,     277,     300
    95,     245,     257,     301,     293,     250,     277,     273,
    269,     274,     300
    96,     247,     257,     293,     249,     252,     274,     270,
    248,     254,     271
    97,     303,     293,     257,     305,     298,     274,     278,
    304,     296,     279
    98,     259,     249,     305,     257,     253,     275,     280,
    258,     254,     279
    99,     295,     305,     249,     293,     299,     275,     272,
    294,     296,     271
    100,     249,     257,     293,     305,     254,     274,     271,
    275,     279,     296
    101,     291,     337,      67,     293,     314,     311,     287,
    292,     315,     286
    102,     113,      67,     337,     115,      88,     311,     333,
    114,      89,     336
    103,      69,     115,     293,      67,      90,     312,     288,
    68,      89,     286
    104,     339,     293,     115,     337,     316,     312,     334,
    338,     315,     336
    105,      67,     293,     337,     115,     286,     315,     311,
    89,     312,     336
    106,      69,     293,     115,      71,     288,     312,      90,
    70,     290,      91
    107,     339,     115,     293,     341,     334,     312,     316,
    340,     332,     317
    108,     295,      71,     341,     293,     289,     313,     318,
    294,     290,     317
    109,     117,     341,      71,     115,     335,     313,      92,
    116,     332,      91
    110,      71,     293,     115,     341,     290,     312,      91,
    313,     317,     332
    111,     291,     301,     337,     293,     297,     319,     314,
    292,     300,     315
    112,     347,     337,     301,     349,     343,     319,     322,
    348,     342,     323
    113,     303,     293,     349,     301,     298,     320,     324,
    302,     300,     323
    114,     339,     349,     293,     337,     344,     320,     316,
    338,     342,     315
    115,     293,     301,     337,     349,     300,     319,     315,
    320,     323,     342
    116,     303,     349,     293,     305,     324,     320,     298,
    304,     325,     296
    117,     339,     293,     349,     341,     316,     320,     344,
    340,     317,     346
    118,     295,     341,     305,     293,     318,     321,     299,
    294,     317,     296
    119,     351,     305,     341,     349,     326,     321,     345,
    350,     325,     346
    120,     293,     305,     349,     341,     296,     325,     320,
    317,     321,     346
    121,      25,     249,      71,     140,     243,     267,      46,
    139,     361,     160
    122,     295,      71,     249,     410,     289,     267,     272,
    409,     403,     386
    123,     364,     140,     410,     249,     359,     383,     387,
    363,     361,     386
    124,     186,     410,     140,      71,     405,     383,     161,
    185,     403,     160
    125,     140,     249,      71,     410,     361,     267,     160,
    383,     386,     403
    126,     364,     410,     140,     366,     387,     383,     359,
    365,     388,     357
    127,     186,     140,     410,     188,     161,     383,     405,
    187,     162,     407
    128,     142,     188,     366,     140,     163,     384,     360,
    141,     162,     357
    129,     412,     366,     188,     410,     389,     384,     406,
    411,     388,     407
    130,     140,     366,     410,     188,     357,     388,     383,
    162,     384,     407
    131,     259,     305,     249,     374,     280,     275,     253,
    373,     394,     367
    132,     295,     249,     305,     410,     272,     275,     299,
    409,     386,     417
    133,     364,     410,     374,     249,     387,     391,     369,
    363,     386,     367
    134,     420,     374,     410,     305,     395,     391,     415,
    419,     394,     417
    135,     249,     374,     305,     410,     367,     394,     275,
    386,     391,     417
    136,     364,     374,     410,     366,     369,     391,     387,
    365,     371,     388
    137,     420,     410,     374,     422,     415,     391,     395,
    421,     413,     396
    138,     376,     366,     422,     374,     370,     392,     397,
    375,     371,     396
    139,     412,     422,     366,     410,     416,     392,     389,
    411,     413,     388
    140,     366,     374,     410,     422,     371,     391,     388,
    392,     396,     413
    141,     295,     341,      71,     410,     318,     313,     289,
    409,     432,     403
    142,     117,      71,     341,     232,      92,     313,     335,
    231,     206,     453
    143,     186,     232,     410,      71,     207,     429,     405,
    185,     206,     403
    144,     456,     410,     232,     341,     433,     429,     451,
    455,     432,     453
    145,      71,     410,     341,     232,     403,     432,     313,
    206,     429,     453
    146,     186,     410,     232,     188,     405,     429,     207,
    187,     407,     208
    147,     456,     232,     410,     458,     451,     429,     433,
    457,     449,     434
    148,     412,     188,     458,     410,     406,     430,     435,
    411,     407,     434
    149,     234,     458,     188,     232,     452,     430,     209,
    233,     449,     208
    150,     188,     410,     232,     458,     407,     429,     208,
    430,     434,     449
    151,     295,     305,     341,     410,     299,     321,     318,
    409,     417,     432
    152,     351,     341,     305,     466,     345,     321,     326,
    465,     459,     440
    153,     420,     410,     466,     305,     415,     437,     441,
    419,     417,     440
    154,     456,     466,     410,     341,     461,     437,     433,
    455,     459,     432
    155,     410,     305,     341,     466,     417,     321,     432,
    437,     440,     459
    156,     420,     466,     410,     422,     441,     437,     415,
    421,     442,     413
    157,     456,     410,     466,     458,     433,     437,     461,
    457,     434,     463
    158,     412,     458,     422,     410,     435,     438,     416,
    411,     434,     413
    159,     468,     422,     458,     466,     443,     438,     462,
    467,     442,     463
    160,     410,     422,     466,     458,     413,     442,     437,
    434,     438,     463
    161,     259,     479,     305,     374,     475,     499,     280,
    373,     478,     394
    162,     525,     305,     479,     527,     521,     499,     502,
    526,     520,     503
    163,     481,     374,     527,     479,     476,     500,     504,
    480,     478,     503
    164,     420,     527,     374,     305,     522,     500,     395,
    419,     520,     394
    165,     374,     479,     305,     527,     478,     499,     394,
    500,     503,     520
    166,     481,     527,     374,     483,     504,     500,     476,
    482,     505,     474
    167,     420,     374,     527,     422,     395,     500,     522,
    421,     396,     524
    168,     376,     422,     483,     374,     397,     501,     477,
    375,     396,     474
    169,     529,     483,     422,     527,     506,     501,     523,
    528,     505,     524
    170,     374,     483,     527,     422,     474,     505,     500,
    396,     501,     524
    171,     489,     535,     479,     491,     510,     507,     485,
    490,     511,     484
    172,     525,     479,     535,     527,     502,     507,     531,
    526,     503,     534
    173,     481,     527,     491,     479,     504,     508,     486,
    480,     503,     484
    174,     537,     491,     527,     535,     512,     508,     532,
    536,     511,     534
    175,     479,     491,     535,     527,     484,     511,     507,
    503,     508,     534
    176,     481,     491,     527,     483,     486,     508,     504,
    482,     488,     505
    177,     537,     527,     491,     539,     532,     508,     512,
    538,     530,     513
    178,     493,     483,     539,     491,     487,     509,     514,
    492,     488,     513
    179,     529,     539,     483,     527,     533,     509,     506,
    528,     530,     505
    180,     483,     491,     527,     539,     488,     508,     505,
    509,     513,     530
    181,     525,     571,     305,     527,     548,     545,     521,
    526,     549,     520
    182,     351,     305,     571,     466,     326,     545,     567,
    465,     440,     570
    183,     420,     466,     527,     305,     441,     546,     522,
    419,     440,     520
    184,     573,     527,     466,     571,     550,     546,     568,
    572,     549,     570
    185,     305,     527,     571,     466,     520,     549,     545,
    440,     546,     570
    186,     420,     527,     466,     422,     522,     546,     441,
    421,     524,     442
    187,     573,     466,     527,     575,     568,     546,     550,
    574,     566,     551
    188,     529,     422,     575,     527,     523,     547,     552,
    528,     524,     551
    189,     468,     575,     422,     466,     569,     547,     443,
    467,     566,     442
    190,     422,     527,     466,     575,     524,     546,     442,
    547,     551,     566
    191,     525,     535,     571,     527,     531,     553,     548,
    526,     534,     549
    192,     581,     571,     535,     583,     577,     553,     556,
    582,     576,     557
    193,     537,     527,     583,     535,     532,     554,     558,
    536,     534,     557
    194,     573,     583,     527,     571,     578,     554,     550,
    572,     576,     549
    195,     527,     535,     571,     583,     534,     553,     549,
    554,     557,     576
    196,     537,     583,     527,     539,     558,     554,     532,
    538,     559,     530
    197,     573,     527,     583,     575,     550,     554,     578,
    574,     551,     580
    198,     529,     575,     539,     527,     552,     555,     533,
    528,     551,     530
    199,     585,     539,     575,     583,     560,     555,     579,
    584,     559,     580
    200,     527,     539,     583,     575,     530,     559,     554,
    551,     555,     580
    201,     255,     596,     301,     257,     592,     616,     276,
    256,     595,     277
    202,     642,     301,     596,     644,     638,     616,     619,
    643,     637,     620
    203,     598,     257,     644,     596,     593,     617,     621,
    597,     595,     620
    204,     303,     644,     257,     301,     639,     617,     278,
    302,     637,     277
    205,     257,     596,     301,     644,     595,     616,     277,
    617,     620,     637
    206,     598,     644,     257,     479,     621,     617,     593,
    599,     622,     591
    207,     303,     257,     644,     305,     278,     617,     639,
    304,     279,     641
    208,     259,     305,     479,     257,     280,     499,     475,
    258,     279,     591
    209,     525,     479,     305,     644,     502,     499,     521,
    645,     622,     641
    210,     257,     479,     644,     305,     591,     622,     617,
    279,     499,     641
    211,     606,     652,     596,     608,     627,     626,     603,
    607,     628,     601
    212,     642,     596,     652,     644,     619,     626,     648,
    643,     620,     651
    213,     598,     644,     608,     596,     621,     625,     604,
    597,     620,     601
    214,     654,     608,     644,     652,     629,     625,     650,
    653,     628,     651
    215,     596,     608,     652,     644,     601,     628,     626,
    620,     625,     651
    216,     598,     608,     644,     479,     604,     625,     621,
    599,     605,     622
    217,     654,     644,     608,     535,     650,     625,     629,
    655,     647,     630
    218,     489,     479,     535,     608,     485,     507,     510,
    609,     605,     630
    219,     525,     535,     479,     644,     531,     507,     502,
    645,     647,     622
    220,     479,     608,     644,     535,     605,     625,     622,
    507,     630,     647
    221,     642,     688,     301,     644,     665,     662,     638,
    643,     666,     637
    222,     347,     301,     688,     349,     322,     662,     684,
    348,     323,     687
    223,     303,     349,     644,     301,     324,     663,     639,
    302,     323,     637
    224,     690,     644,     349,     688,     667,     663,     685,
    689,     666,     687
    225,     301,     644,     688,     349,     637,     666,     662,
    323,     663,     687
    226,     303,     644,     349,     305,     639,     663,     324,
    304,     641,     325
    227,     690,     349,     644,     571,     685,     663,     667,
    691,     683,     668
    228,     525,     305,     571,     644,     521,     545,     548,
    645,     641,     668
    229,     351,     571,     305,     349,     567,     545,     326,
    350,     683,     325
    230,     305,     644,     349,     571,     641,     663,     325,
    545,     668,     683
    231,     642,     652,     688,     644,     648,     672,     665,
    643,     651,     666
    232,     698,     688,     652,     700,     695,     672,     673,
    699,     693,     674
    233,     654,     644,     700,     652,     650,     671,     675,
    653,     651,     674
    234,     690,     700,     644,     688,     696,     671,     667,
    689,     693,     666
    235,     644,     652,     688,     700,     651,     672,     666,
    671,     674,     693
    236,     654,     700,     644,     535,     675,     671,     650,
    655,     676,     647
    237,     690,     644,     700,     571,     667,     671,     696,
    691,     668,     697
    238,     525,     571,     535,     644,     548,     553,     531,
    645,     668,     647
    239,     581,     535,     571,     700,     556,     553,     577,
    701,     676,     697
    240,     644,     535,     700,     571,     647,     676,     671,
    668,     553,     697
    **
    ** eall
    **
    *SOLID SECTION, ELSET=EALL, MATERIAL=STEEL
    1.,
    **
    ** steel
    ** Date: 23-May-96           Time: 17:30:54
    **
    *MATERIAL, NAME=STEEL
    **
    *ELASTIC, TYPE=ISO
    2.1E+11,         0.3
    *NSET,NSET=ZFIX
    47,53,57,63,67,287,291,297,301,638,642,648,652
    *ELSET,ELSET=EOUT
    199,
    **
    ** step  1,Default
    **
    *STEP, PERT
    This load case is the default load case that always appears
    *STATIC
    **
    ** yfix
    **
    *BOUNDARY, OP=NEW
    489, 2,,          0.
    490, 2,,          0.
    491, 2,,          0.
    492, 2,,          0.
    493, 2,,          0.
    510, 2,,          0.
    511, 2,,          0.
    512, 2,,          0.
    513, 2,,          0.
    514, 2,,          0.
    535, 2,,          0.
    536, 2,,          0.
    537, 2,,          0.
    538, 2,,          0.
    539, 2,,          0.
    556, 2,,          0.
    557, 2,,          0.
    558, 2,,          0.
    559, 2,,          0.
    560, 2,,          0.
    581, 2,,          0.
    582, 2,,          0.
    583, 2,,          0.
    584, 2,,          0.
    585, 2,,          0.
    607, 2,,          0.
    608, 2,,          0.
    609, 2,,          0.
    628, 2,,          0.
    629, 2,,          0.
    630, 2,,          0.
    653, 2,,          0.
    654, 2,,          0.
    655, 2,,          0.
    674, 2,,          0.
    675, 2,,          0.
    676, 2,,          0.
    699, 2,,          0.
    700, 2,,          0.
    701, 2,,          0.
    ZFIX,3,,0.
    **
    ** xfix
    **
    *BOUNDARY, OP=NEW
    2, 1,,          0.
    3, 1,,          0.
    4, 1,,          0.
    5, 1,,          0.
    27, 1,,          0.
    28, 1,,          0.
    29, 1,,          0.
    30, 1,,          0.
    48, 1,,          0.
    49, 1,,          0.
    50, 1,,          0.
    51, 1,,          0.
    73, 1,,          0.
    74, 1,,          0.
    75, 1,,          0.
    76, 1,,          0.
    94, 1,,          0.
    95, 1,,          0.
    96, 1,,          0.
    97, 1,,          0.
    119, 1,,          0.
    120, 1,,          0.
    121, 1,,          0.
    122, 1,,          0.
    144, 1,,          0.
    145, 1,,          0.
    146, 1,,          0.
    147, 1,,          0.
    165, 1,,          0.
    166, 1,,          0.
    167, 1,,          0.
    168, 1,,          0.
    190, 1,,          0.
    191, 1,,          0.
    192, 1,,          0.
    193, 1,,          0.
    211, 1,,          0.
    212, 1,,          0.
    213, 1,,          0.
    214, 1,,          0.
    **
    ** curvefix
    **
    *BOUNDARY, OP=NEW
    1, 1,,          0.
    1, 2,,          0.
    7, 1,,          0.
    7, 2,,          0.
    11, 1,,          0.
    11, 2,,          0.
    17, 1,,          0.
    17, 2,,          0.
    21, 1,,          0.
    21, 2,,          0.
    26, 1,,          0.
    26, 2,,          0.
    31, 1,,          0.
    31, 2,,          0.
    34, 1,,          0.
    34, 2,,          0.
    39, 1,,          0.
    39, 2,,          0.
    42, 1,,          0.
    42, 2,,          0.
    47, 1,,          0.
    47, 2,,          0.
    53, 1,,          0.
    53, 2,,          0.
    57, 1,,          0.
    57, 2,,          0.
    63, 1,,          0.
    63, 2,,          0.
    67, 1,,          0.
    67, 2,,          0.
    72, 1,,          0.
    72, 2,,          0.
    77, 1,,          0.
    77, 2,,          0.
    80, 1,,          0.
    80, 2,,          0.
    85, 1,,          0.
    85, 2,,          0.
    88, 1,,          0.
    88, 2,,          0.
    93, 1,,          0.
    93, 2,,          0.
    99, 1,,          0.
    99, 2,,          0.
    103, 1,,          0.
    103, 2,,          0.
    109, 1,,          0.
    109, 2,,          0.
    113, 1,,          0.
    113, 2,,          0.
    241, 1,,          0.
    241, 2,,          0.
    245, 1,,          0.
    245, 2,,          0.
    251, 1,,          0.
    251, 2,,          0.
    255, 1,,          0.
    255, 2,,          0.
    265, 1,,          0.
    265, 2,,          0.
    268, 1,,          0.
    268, 2,,          0.
    273, 1,,          0.
    273, 2,,          0.
    276, 1,,          0.
    276, 2,,          0.
    287, 1,,          0.
    287, 2,,          0.
    291, 1,,          0.
    291, 2,,          0.
    297, 1,,          0.
    297, 2,,          0.
    301, 1,,          0.
    301, 2,,          0.
    311, 1,,          0.
    311, 2,,          0.
    314, 1,,          0.
    314, 2,,          0.
    319, 1,,          0.
    319, 2,,          0.
    322, 1,,          0.
    322, 2,,          0.
    333, 1,,          0.
    333, 2,,          0.
    337, 1,,          0.
    337, 2,,          0.
    343, 1,,          0.
    343, 2,,          0.
    347, 1,,          0.
    347, 2,,          0.
    592, 1,,          0.
    592, 2,,          0.
    596, 1,,          0.
    596, 2,,          0.
    603, 1,,          0.
    603, 2,,          0.
    606, 1,,          0.
    606, 2,,          0.
    616, 1,,          0.
    616, 2,,          0.
    619, 1,,          0.
    619, 2,,          0.
    626, 1,,          0.
    626, 2,,          0.
    627, 1,,          0.
    627, 2,,          0.
    638, 1,,          0.
    638, 2,,          0.
    642, 1,,          0.
    642, 2,,          0.
    648, 1,,          0.
    648, 2,,          0.
    652, 1,,          0.
    652, 2,,          0.
    662, 1,,          0.
    662, 2,,          0.
    665, 1,,          0.
    665, 2,,          0.
    672, 1,,          0.
    672, 2,,          0.
    673, 1,,          0.
    673, 2,,          0.
    684, 1,,          0.
    684, 2,,          0.
    688, 1,,          0.
    688, 2,,          0.
    695, 1,,          0.
    695, 2,,          0.
    698, 1,,          0.
    698, 2,,          0.
    **
    ** load
    **
    *DLOAD, OP=NEW
    22, P4,       1.E+6
    24, P4,       1.E+6
    27, P2,       1.E+6
    29, P2,       1.E+6
    32, P2,       1.E+6
    34, P2,       1.E+6
    37, P4,       1.E+6
    39, P4,       1.E+6
    62, P4,       1.E+6
    64, P4,       1.E+6
    67, P2,       1.E+6
    69, P2,       1.E+6
    72, P2,       1.E+6
    74, P2,       1.E+6
    77, P4,       1.E+6
    79, P4,       1.E+6
    102, P4,       1.E+6
    104, P4,       1.E+6
    107, P2,       1.E+6
    109, P2,       1.E+6
    112, P2,       1.E+6
    114, P2,       1.E+6
    117, P4,       1.E+6
    119, P4,       1.E+6
    142, P4,       1.E+6
    144, P4,       1.E+6
    147, P2,       1.E+6
    149, P2,       1.E+6
    152, P2,       1.E+6
    154, P2,       1.E+6
    157, P4,       1.E+6
    159, P4,       1.E+6
    182, P4,       1.E+6
    184, P4,       1.E+6
    187, P2,       1.E+6
    189, P2,       1.E+6
    192, P2,       1.E+6
    194, P2,       1.E+6
    197, P4,       1.E+6
    199, P4,       1.E+6
    222, P4,       1.E+6
    224, P4,       1.E+6
    227, P2,       1.E+6
    229, P2,       1.E+6
    232, P2,       1.E+6
    234, P2,       1.E+6
    237, P4,       1.E+6
    239, P4,       1.E+6
    **
    *NODE PRINT, FREQ=0
    U,
    *EL PRINT,FREQ=1,ELSET=EOUT,POSITION=AVERAGED AT NODES
    S,
    **
    *EL FILE, POSITION=AVERAGED AT NODES, FREQ=1,ELSET=EOUT
    S,
    **
    *END STEP
    """
    write("NLE10.inp", INP_file)
    
    output = MeshImportModule.import_ABAQUS("NLE10.inp")
    fens, fes = output["fens"], output["fesets"][1]
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, facing=true, direction=[1.0, 1.0, 0.0]);
    topbfl = selectelem(fens, bdryfes, box=[0.0, Inf, 0.0, Inf, Thickness, Thickness], inflate=tolerance);
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    L12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, L12, true, 1, 0.0)
    setebc!(u, L12, true, 2, 0.0)
    LL = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    L3 = intersect(LL, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, L3, true, 3, 0.0)
    L1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L1,true, 1, 0.0) # symmetry plane X = 0
    L2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    eL1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), TriRule(3)))
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(eL1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMST10(MR, IntegDomain(fes, TetRule(4)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extrapmean)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Mean-stress: $(fld.values[nl,1][1]/phun("MPa"))")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Trend estimation: $(fld.values[nl,1][1]/phun("MPa"))")
    
    File =  "LE10NAFEMS_MST10_sigmay.vtk"
    vtkexportmesh(File, fes.conn, geom.values,
    FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
    scalars=[("sigmay", fld.values)])
    @async run(`"paraview.exe" $File`)
    true
    
    
    
    AE = AbaqusExporter("LE10NAFEMS_MST10");
    HEADING(AE, "LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole.");
    PART(AE, "part1");
    END_PART(AE);
    ASSEMBLY(AE, "ASSEM1");
    INSTANCE(AE, "INSTNC1", "PART1");
    NODE(AE, fens.xyz);
    ELEMENT(AE, "c3d10", "AllElements", 1, femm.integdata.fes.conn)
    ELEMENT(AE, "SFM3D6", "TractionElements",
    1+count(femm.integdata.fes), eL1femm.integdata.fes.conn)
    NSET_NSET(AE, "L1", L1)
    NSET_NSET(AE, "L2", L2)
    NSET_NSET(AE, "L3", L3)
    NSET_NSET(AE, "L12", L12)
    ORIENTATION(AE, "GlobalOrientation", vec([1. 0 0]), vec([0 1. 0]));
    SOLID_SECTION(AE, "elasticity", "GlobalOrientation", "AllElements", "Hourglassctl");
    SURFACE_SECTION(AE, "TractionElements")
    END_INSTANCE(AE);
    END_ASSEMBLY(AE);
    MATERIAL(AE, "elasticity")
    ELASTIC(AE, E, nu)
    SECTION_CONTROLS(AE, "Hourglassctl", "HOURGLASS=ENHANCED")
    STEP_PERTURBATION_STATIC(AE)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L1", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L2", 2)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L3", 3)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L12", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L12", 2)
    DLOAD(AE, "ASSEM1.INSTNC1.TractionElements", vec([0.0, 0.0, -qmagn]))
    END_STEP(AE)
    close(AE)
    
    output = MeshImportModule.import_ABAQUS(AE.filename)
    fens, fes = output["fens"], output["fesets"][1]
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, facing=true, direction=[1.0, 1.0, 0.0]);
    topbfl = selectelem(fens, bdryfes, box=[0.0, Inf, 0.0, Inf, Thickness, Thickness], inflate=tolerance);
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    L12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, L12, true, 1, 0.0)
    setebc!(u, L12, true, 2, 0.0)
    LL = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    L3 = intersect(LL, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, L3, true, 3, 0.0)
    L1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L1,true, 1, 0.0) # symmetry plane X = 0
    L2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    eL1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), TriRule(3)))
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(eL1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMST10(MR, IntegDomain(fes, TetRule(4)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extrapmean)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Mean-stress: $(fld.values[nl,1][1]/phun("MPa"))")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Trend estimation: $(fld.values[nl,1][1]/phun("MPa"))")
    
    File =  "LE10NAFEMS_MST10_sigmay.vtk"
    vtkexportmesh(File, fes.conn, geom.values,
    FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
    scalars=[("sigmay", fld.values)])
    @async run(`"paraview.exe" $File`)
    true
    
end # LE10NAFEMS_Abaqus_fine_MST10


function LE10NAFEMS_Abaqus_MST10()
    # Thick elliptical plate with an elliptical hole is clamped on its exterior
    # boundary and is loaded with transverse  pressure.
    # This is a NAFEMS Benchmark, Test No. LE10.
    # The plate is discretized with solid elements.
    # Because of the symmetries of the geometry and load, only quarter of the plate is modeled.
    # The $\sigma_y=\sigma_2$ at the point $P$ is to be determined. Since the
    # target point is on the boundary of the domain it will not be an
    # integration node as we use Gauss quadrature. The reference value is -5.38 MPa.
    
    println("LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole."        )
    t0 = time()
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    tolerance = Thickness/1000.; # Geometrical tolerance
    
    INP_file = """
    *HEADING
    NAFEMS TEST NLE10, COARSE MESH, C3D10M ELEMENTS
    *NODE
    1,     2.83277,       1.348
    2,     2.48116,     1.04837
    3,     2.12955,    0.748738
    4,     3.14146,    0.704779
    5,     2.33893,    0.399071
    6,     2.68977,    0.374369
    7,        3.25,          0.
    8,      2.8335,          0.
    9,       2.417,          0.
    10,     2.83277,       1.348,        0.15
    11,     2.48116,     1.04837,        0.15
    12,     2.12955,    0.748738,        0.15
    13,     2.33841,    0.400381,        0.15
    14,     3.14128,     0.70533,        0.15
    15,        3.25,          0.,        0.15
    16,      2.8335,          0.,        0.15
    17,       2.417,          0.,        0.15
    18,     2.83277,       1.348,         0.3
    19,     2.48116,     1.04837,         0.3
    20,     2.12955,    0.748738,         0.3
    21,     2.62488,       0.674,         0.3
    22,     2.33893,    0.399071,         0.3
    23,     3.14146,    0.704779,         0.3
    24,        3.25,          0.,         0.3
    25,      2.8335,          0.,         0.3
    26,       2.417,          0.,         0.3
    27,     2.83277,       1.348,        0.45
    28,     2.48116,     1.04837,        0.45
    29,     2.12955,    0.748738,        0.45
    30,     2.33841,    0.400381,        0.45
    31,     3.14128,     0.70533,        0.45
    32,        3.25,          0.,        0.45
    33,      2.8335,          0.,        0.45
    34,       2.417,          0.,        0.45
    35,     2.83277,       1.348,         0.6
    36,     2.48116,     1.04837,         0.6
    37,     2.12955,    0.748738,         0.6
    38,     3.14146,    0.704779,         0.6
    39,     2.33893,    0.399071,         0.6
    40,     2.68977,    0.374369,         0.6
    41,        3.25,          0.,         0.6
    42,      2.8335,          0.,         0.6
    43,       2.417,          0.,         0.6
    45,     1.95628,    0.600869
    46,     1.78302,       0.453
    47,     2.06477,    0.374369
    48,     1.93715,    0.248725
    51,      2.2085,          0.
    52,          2.,          0.
    54,     1.95628,    0.600869,        0.15
    55,     1.78302,       0.453,        0.15
    56,     1.93661,    0.249767,        0.15
    59,      2.2085,          0.,        0.15
    60,          2.,          0.,        0.15
    62,     1.95628,    0.600869,         0.3
    63,     1.78302,       0.453,         0.3
    64,     1.93715,    0.248725,         0.3
    66,     2.10001,      0.2265,         0.3
    68,      2.2085,          0.,         0.3
    69,          2.,          0.,         0.3
    71,     1.95628,    0.600869,        0.45
    72,     1.78302,       0.453,        0.45
    74,     1.93661,    0.249767,        0.45
    76,      2.2085,          0.,        0.45
    77,          2.,          0.,        0.45
    79,     1.95628,    0.600869,         0.6
    80,     1.78302,       0.453,         0.6
    81,     2.06477,    0.374369,         0.6
    83,     1.93715,    0.248725,         0.6
    85,      2.2085,          0.,         0.6
    86,          2.,          0.,         0.6
    87,       1.783,     2.29921
    88,     1.57618,     1.80182
    89,     1.36937,     1.30443
    90,     1.95627,     1.52397
    91,     2.36495,     1.88628
    92,     1.78146,     1.06985
    96,       1.783,     2.29921,        0.15
    97,     1.57618,     1.80182,        0.15
    98,     1.36937,     1.30443,        0.15
    99,     1.78071,     1.07038,        0.15
    100,     2.36449,     1.88669,        0.15
    104,       1.783,     2.29921,         0.3
    105,     1.57618,     1.80182,         0.3
    106,     1.36937,     1.30443,         0.3
    107,     2.36495,     1.88628,         0.3
    108,     1.78146,     1.06985,         0.3
    109,     2.10107,     1.32621,         0.3
    113,       1.783,     2.29921,        0.45
    114,     1.57618,     1.80182,        0.45
    115,     1.36937,     1.30443,        0.45
    116,     2.36449,     1.88669,        0.45
    117,     1.78071,     1.07038,        0.45
    121,       1.783,     2.29921,         0.6
    122,     1.57618,     1.80182,         0.6
    123,     1.36937,     1.30443,         0.6
    124,     1.95627,     1.52397,         0.6
    125,     2.36495,     1.88628,         0.6
    126,     1.78146,     1.06985,         0.6
    131,     1.26718,     1.05863
    132,       1.165,    0.812831
    134,     1.49321,    0.665266
    135,     1.64727,    0.780784
    140,     1.26718,     1.05863,        0.15
    141,       1.165,    0.812831,        0.15
    143,      1.4924,    0.665723,        0.15
    148,     1.26718,     1.05863,         0.3
    149,       1.165,    0.812831,         0.3
    150,     1.57619,    0.878714,         0.3
    152,     1.49321,    0.665266,         0.3
    157,     1.26718,     1.05863,        0.45
    158,       1.165,    0.812831,        0.45
    160,      1.4924,    0.665723,        0.45
    165,     1.26718,     1.05863,         0.6
    166,       1.165,    0.812831,         0.6
    168,     1.49321,    0.665266,         0.6
    169,     1.64727,    0.780784,         0.6
    173,          0.,       1.583
    174,          0.,      1.2915
    175,          0.,          1.
    176,      0.5825,     1.19792
    177,    0.699442,     1.51527
    178,    0.590531,    0.955415
    182,          0.,       1.583,        0.15
    183,          0.,      1.2915,        0.15
    184,          0.,          1.,        0.15
    185,    0.698861,     1.51538,        0.15
    186,    0.590076,    0.955486,        0.15
    190,          0.,       1.583,         0.3
    191,          0.,      1.2915,         0.3
    192,          0.,          1.,         0.3
    193,    0.699442,     1.51527,         0.3
    194,    0.590531,    0.955415,         0.3
    195,    0.684684,     1.15221,         0.3
    199,          0.,       1.583,        0.45
    200,          0.,      1.2915,        0.45
    201,          0.,          1.,        0.45
    202,    0.698861,     1.51538,        0.45
    203,    0.590076,    0.955486,        0.45
    207,          0.,       1.583,         0.6
    208,          0.,      1.2915,         0.6
    209,          0.,          1.,         0.6
    210,      0.5825,     1.19792,         0.6
    211,    0.699442,     1.51527,         0.6
    212,    0.590531,    0.955415,         0.6
    216,          0.,        2.75
    217,          0.,      2.1665
    219,    0.920251,     2.63745
    221,      0.8915,      1.9411
    225,          0.,        2.75,        0.15
    226,          0.,      2.1665,        0.15
    228,    0.919707,     2.63759,        0.15
    233,          0.,        2.75,         0.3
    234,          0.,      2.1665,         0.3
    236,    0.684684,     2.02721,         0.3
    237,    0.920251,     2.63745,         0.3
    242,          0.,        2.75,        0.45
    243,          0.,      2.1665,        0.45
    245,    0.919707,     2.63759,        0.45
    250,          0.,        2.75,         0.6
    251,          0.,      2.1665,         0.6
    253,    0.920251,     2.63745,         0.6
    255,      0.8915,      1.9411,         0.6
    **
    **
    *ELEMENT, TYPE=C3D10M, ELSET=EALL
    1,       1,       7,      18,       3,       4,      14,      10,
    2,       6,      11
    2,      24,      18,       7,      26,      23,      14,      15,
    25,      21,      16
    3,       9,       3,      26,       7,       5,      13,      17,
    8,       6,      16
    4,      20,      26,       3,      18,      22,      13,      12,
    19,      21,      11
    5,       3,       7,      18,      26,       6,      14,      11,
    13,      16,      21
    6,      24,      41,      18,      26,      32,      31,      23,
    25,      33,      21
    7,      35,      18,      41,      37,      27,      31,      38,
    36,      28,      40
    8,      20,      37,      26,      18,      29,      30,      22,
    19,      28,      21
    9,      43,      26,      37,      41,      34,      30,      39,
    42,      33,      40
    10,      18,      26,      41,      37,      21,      33,      31,
    28,      30,      40
    11,       9,      26,       3,      52,      17,      13,       5,
    51,      59,      47
    12,      20,       3,      26,      63,      12,      13,      22,
    62,      54,      66
    13,      46,      63,      52,       3,      55,      56,      48,
    45,      54,      47
    14,      69,      52,      63,      26,      60,      56,      64,
    68,      59,      66
    15,       3,      52,      26,      63,      47,      59,      13,
    54,      56,      66
    16,      20,      26,      37,      63,      22,      30,      29,
    62,      66,      71
    17,      43,      37,      26,      86,      39,      30,      34,
    85,      81,      76
    18,      69,      63,      86,      26,      64,      74,      77,
    68,      66,      76
    19,      80,      86,      63,      37,      83,      74,      72,
    79,      81,      71
    20,      63,      26,      37,      86,      66,      30,      71,
    74,      76,      81
    21,       1,      18,      87,       3,      10,     100,      91,
    2,      11,      90
    22,     104,      87,      18,     106,      96,     100,     107,
    105,      97,     109
    23,      89,     106,       3,      87,      98,      99,      92,
    88,      97,      90
    24,      20,       3,     106,      18,      12,      99,     108,
    19,      11,     109
    25,      87,       3,      18,     106,      90,      11,     100,
    97,      99,     109
    26,     104,      18,     121,     106,     107,     116,     113,
    105,     109,     114
    27,      35,     121,      18,      37,     125,     116,      27,
    36,     124,      28
    28,      20,     106,      37,      18,     108,     117,      29,
    19,     109,      28
    29,     123,      37,     106,     121,     126,     117,     115,
    122,     124,     114
    30,     106,      18,     121,      37,     109,     116,     114,
    117,      28,     124
    31,      89,       3,     106,     132,      92,      99,      98,
    131,     135,     140
    32,      20,     106,       3,      63,     108,      99,      12,
    62,     150,      54
    33,      46,     132,      63,       3,     134,     143,      55,
    45,     135,      54
    34,     149,      63,     132,     106,     152,     143,     141,
    148,     150,     140
    35,     132,       3,     106,      63,     135,      99,     140,
    143,      54,     150
    36,      20,      37,     106,      63,      29,     117,     108,
    62,      71,     150
    37,     123,     106,      37,     166,     115,     117,     126,
    165,     157,     169
    38,     149,     166,      63,     106,     158,     160,     152,
    148,     157,     150
    39,      80,      63,     166,      37,      72,     160,     168,
    79,      71,     169
    40,     106,      63,      37,     166,     150,      71,     117,
    157,     160,     169
    41,      89,     106,     173,     132,      98,     185,     177,
    131,     140,     176
    42,     190,     173,     106,     192,     182,     185,     193,
    191,     183,     195
    43,     175,     192,     132,     173,     184,     186,     178,
    174,     183,     176
    44,     149,     132,     192,     106,     141,     186,     194,
    148,     140,     195
    45,     173,     132,     106,     192,     176,     140,     185,
    183,     186,     195
    46,     190,     106,     207,     192,     193,     202,     199,
    191,     195,     200
    47,     123,     207,     106,     166,     211,     202,     115,
    165,     210,     157
    48,     149,     192,     166,     106,     194,     203,     158,
    148,     195,     157
    49,     209,     166,     192,     207,     212,     203,     201,
    208,     210,     200
    50,     192,     106,     207,     166,     195,     202,     200,
    203,     157,     210
    51,     216,      87,     233,     173,     219,     228,     225,
    217,     221,     226
    52,     104,     233,      87,     106,     237,     228,      96,
    105,     236,      97
    53,      89,     173,     106,      87,     177,     185,      98,
    88,     221,      97
    54,     190,     106,     173,     233,     193,     185,     182,
    234,     236,     226
    55,     173,      87,     233,     106,     221,     228,     226,
    185,      97,     236
    56,     104,     121,     233,     106,     113,     245,     237,
    105,     114,     236
    57,     250,     233,     121,     207,     242,     245,     253,
    251,     243,     255
    58,     190,     207,     106,     233,     199,     202,     193,
    234,     243,     236
    59,     123,     106,     207,     121,     115,     202,     211,
    122,     114,     255
    60,     233,     106,     121,     207,     236,     114,     245,
    243,     202,     255
    """
    write("NLE10.inp", INP_file)
    
    output = MeshImportModule.import_ABAQUS("NLE10.inp")
    fens, fes = output["fens"], output["fesets"][1]
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, facing=true, direction=[1.0, 1.0, 0.0]);
    topbfl = selectelem(fens, bdryfes, box=[0.0, Inf, 0.0, Inf, Thickness, Thickness], inflate=tolerance);
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    L12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, L12, true, 1, 0.0)
    setebc!(u, L12, true, 2, 0.0)
    LL = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    L3 = intersect(LL, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, L3, true, 3, 0.0)
    L1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L1,true, 1, 0.0) # symmetry plane X = 0
    L2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    eL1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), TriRule(3)))
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(eL1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMST10(MR, IntegDomain(fes, TetRule(4)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extrapmean)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Mean-stress: $(fld.values[nl,1][1]/phun("MPa"))")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Trend estimation: $(fld.values[nl,1][1]/phun("MPa"))")
    
    File =  "LE10NAFEMS_MST10_sigmay.vtk"
    vtkexportmesh(File, fes.conn, geom.values,
    FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
    scalars=[("sigmay", fld.values)])
    @async run(`"paraview.exe" $File`)
    true
    
    
    
    AE = AbaqusExporter("LE10NAFEMS_MST10");
    HEADING(AE, "LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole.");
    PART(AE, "part1");
    END_PART(AE);
    ASSEMBLY(AE, "ASSEM1");
    INSTANCE(AE, "INSTNC1", "PART1");
    NODE(AE, fens.xyz);
    ELEMENT(AE, "c3d10", "AllElements", 1, femm.integdata.fes.conn)
    ELEMENT(AE, "SFM3D6", "TractionElements",
    1+count(femm.integdata.fes), eL1femm.integdata.fes.conn)
    NSET_NSET(AE, "L1", L1)
    NSET_NSET(AE, "L2", L2)
    NSET_NSET(AE, "L3", L3)
    NSET_NSET(AE, "L12", L12)
    ORIENTATION(AE, "GlobalOrientation", vec([1. 0 0]), vec([0 1. 0]));
    SOLID_SECTION(AE, "elasticity", "GlobalOrientation", "AllElements", "Hourglassctl");
    SURFACE_SECTION(AE, "TractionElements")
    END_INSTANCE(AE);
    END_ASSEMBLY(AE);
    MATERIAL(AE, "elasticity")
    ELASTIC(AE, E, nu)
    SECTION_CONTROLS(AE, "Hourglassctl", "HOURGLASS=ENHANCED")
    STEP_PERTURBATION_STATIC(AE)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L1", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L2", 2)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L3", 3)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L12", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.L12", 2)
    DLOAD(AE, "ASSEM1.INSTNC1.TractionElements", vec([0.0, 0.0, -qmagn]))
    END_STEP(AE)
    close(AE)
    
    output = MeshImportModule.import_ABAQUS(AE.filename)
    fens, fes = output["fens"], output["fesets"][1]
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, facing=true, direction=[1.0, 1.0, 0.0]);
    topbfl = selectelem(fens, bdryfes, box=[0.0, Inf, 0.0, Inf, Thickness, Thickness], inflate=tolerance);
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    L12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, L12, true, 1, 0.0)
    setebc!(u, L12, true, 2, 0.0)
    LL = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    L3 = intersect(LL, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, L3, true, 3, 0.0)
    L1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L1,true, 1, 0.0) # symmetry plane X = 0
    L2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,L2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    eL1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), TriRule(3)))
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(eL1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMST10(MR, IntegDomain(fes, TetRule(4)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extrapmean)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Mean-stress: $(fld.values[nl,1][1]/phun("MPa"))")
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("Trend estimation: $(fld.values[nl,1][1]/phun("MPa"))")
    
    File =  "LE10NAFEMS_MST10_sigmay.vtk"
    vtkexportmesh(File, fes.conn, geom.values,
    FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
    scalars=[("sigmay", fld.values)])
    @async run(`"paraview.exe" $File`)
    true
    
end # LE10NAFEMS_Abaqus_MST10


function LE10NAFEMS_MSH8()
    # Thick elliptical plate with an elliptical hole is clamped on its exterior
    # boundary and is loaded with transverse  pressure.
    # This is a NAFEMS Benchmark, Test No. LE10.
    # The plate is discretized with solid elements.
    # Because of the symmetries of the geometry and load, only quarter of the plate is modeled.
    # The $\sigma_y=\sigma_2$ at the point $P$ is to be determined. Since the
    # target point is on the boundary of the domain it will not be an
    # integration node as we use Gauss quadrature. The reference value is -5.38 MPa.
    
    println("LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole."        )
    t0 = time()
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    nc = 6; # number of elements per side
    nr = 5; # number of elements per side
    nt = 2; # number of elements through the thickness
    nc = 26; # number of elements per side
    nr = 25; # number of elements per side
    nt = 18; # number of elements through the thickness
    tolerance = Thickness/nt/1000.; # Geometrical tolerance
    
    fens,fes = Q4block(1.0, pi/2, nr, nc)
    #
    @assert nt % 2 == 0 "Number of elements through the thickness must be even"
    fens,fes  = H8extrudeQ4(fens, fes,
    nt, (xyz, layer)->[xyz[1], xyz[2], (layer)/nt*Thickness]);
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, box=[1.0, 1.0, 0.0, pi/2, 0.0, Thickness], inflate=tolerance);
    topbfl = selectelem(fens, bdryfes, box=[0.0, 1.0, 0.0, pi/2, Thickness, Thickness], inflate=tolerance);
    
    # Reshape the generated block into the elliptical plate
    for i=1:count(fens)
        r=fens.xyz[i,1]; a=fens.xyz[i,2]; z=fens.xyz[i,3]
        fens.xyz[i,:]=[(r*Ae+(1-r)*Ai)*cos(a) (r*Be+(1-r)*Bi)*sin(a) z];
    end
    
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    l1 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, l1, true, 1, 0.0)
    setebc!(u, l1, true, 2, 0.0)
    l1 = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    l1 = intersect(l1, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, l1, true, 3, 0.0)
    l1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l1,true, 1, 0.0) # symmetry plane X = 0
    l1 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l1,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), GaussRule(2, 2)))
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(el1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMSH8(MR, IntegDomain(fes, GaussRule(3, 2)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("$((nc, nr, nt)), $(fld.values[nl,1][1]/phun("MPa"))")
    
    File =  "LE10NAFEMS_sigmay.vtk"
    vtkexportmesh(File, fes.conn, geom.values,
    FinEtools.MeshExportModule.H8; vectors=[("u", u.values)],
    scalars=[("sigmay", fld.values)])
    @async run(`"paraview.exe" $File`)
    true
    
end # LE10NAFEMS_MSH8


function LE10NAFEMS_MSH8_alt_export()
    # Thick elliptical plate with an elliptical hole is clamped on its exterior
    # boundary and is loaded with transverse  pressure.
    # This is a NAFEMS Benchmark, Test No. LE10.
    # The plate is discretized with solid elements.
    # Because of the symmetries of the geometry and load, only quarter of the plate is modeled.
    # The $\sigma_y=\sigma_2$ at the point $P$ is to be determined. Since the
    # target point is on the boundary of the domain it will not be an
    # integration node as we use Gauss quadrature. The reference value is -5.38 MPa.
    
    println("LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole."        )
    t0 = time()
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    nc = 6; # number of elements per side
    nr = 5; # number of elements per side
    nt = 2; # number of elements through the thickness
    # nc = 26; # number of elements per side
    # nr = 25; # number of elements per side
    # nt = 18; # number of elements through the thickness
    tolerance = Thickness/nt/1000.; # Geometrical tolerance
    
    fens,fes = Q4block(1.0, pi/2, nr, nc)
    #
    @assert nt % 2 == 0 "Number of elements through the thickness must be even"
    fens,fes  = H8extrudeQ4(fens, fes,
    nt, (xyz, layer)->[xyz[1], xyz[2], (layer)/nt*Thickness]);
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, box=[1.0, 1.0, 0.0, pi/2, 0.0, Thickness], inflate=tolerance);
    topbfl = selectelem(fens, bdryfes, box=[0.0, 1.0, 0.0, pi/2, Thickness, Thickness], inflate=tolerance);
    
    # Reshape the generated block into the elliptical plate
    for i=1:count(fens)
        r=fens.xyz[i,1]; a=fens.xyz[i,2]; z=fens.xyz[i,3]
        fens.xyz[i,:]=[(r*Ae+(1-r)*Ai)*cos(a) (r*Be+(1-r)*Bi)*sin(a) z];
    end
    
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    l12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, l12, true, 1, 0.0)
    setebc!(u, l12, true, 2, 0.0)
    ll = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    l3 = intersect(ll, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, l3, true, 3, 0.0)
    l1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l1,true, 1, 0.0) # symmetry plane X = 0
    l2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), GaussRule(2, 2)))
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(el1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMSH8(MR, IntegDomain(fes, GaussRule(3, 2)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("$((nc, nr, nt)), $(fld.values[nl,1][1]/phun("MPa"))")
    
    # File =  "LE10NAFEMS_sigmay.vtk"
    # vtkexportmesh(File, fes.conn, geom.values,
    #                FinEtools.MeshExportModule.H8; vectors=[("u", u.values)],
    #                scalars=[("sigmay", fld.values)])
    # @async run(`"paraview.exe" $File`)
    # true
    
    
    AE = AbaqusExporter("LE10NAFEMS_H8");
    HEADING(AE, "LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole.");
    PART(AE, "part1");
    END_PART(AE);
    ASSEMBLY(AE, "ASSEM1");
    INSTANCE(AE, "INSTNC1", "PART1");
    NODE(AE, fens.xyz);
    ELEMENT(AE, "c3d8rh", "AllElements", 1, femm.integdata.fes.conn)
    ELEMENT(AE, "SFM3D4", "TractionElements",
    1+count(femm.integdata.fes), el1femm.integdata.fes.conn)
    NSET_NSET(AE, "l1", l1)
    NSET_NSET(AE, "l2", l2)
    NSET_NSET(AE, "l3", l3)
    NSET_NSET(AE, "l12", l12)
    ORIENTATION(AE, "GlobalOrientation", vec([1. 0 0]), vec([0 1. 0]));
    SOLID_SECTION(AE, "elasticity", "GlobalOrientation", "AllElements", "Hourglassctl");
    SURFACE_SECTION(AE, "TractionElements")
    END_INSTANCE(AE);
    END_ASSEMBLY(AE);
    MATERIAL(AE, "elasticity")
    ELASTIC(AE, E, nu)
    SECTION_CONTROLS(AE, "Hourglassctl", "HOURGLASS=ENHANCED")
    STEP_PERTURBATION_STATIC(AE)
    BOUNDARY(AE, "ASSEM1.INSTNC1.", u.is_fixed, u.fixed_values)
    DLOAD(AE, "ASSEM1.INSTNC1.TractionElements", vec([0.0, 0.0, -qmagn]))
    END_STEP(AE)
    close(AE)
    
end # LE10NAFEMS_MSH8_alt_export


function LE10NAFEMS_MSH8_export()
    # Thick elliptical plate with an elliptical hole is clamped on its exterior
    # boundary and is loaded with transverse  pressure.
    # This is a NAFEMS Benchmark, Test No. LE10.
    # The plate is discretized with solid elements.
    # Because of the symmetries of the geometry and load, only quarter of the plate is modeled.
    # The $\sigma_y=\sigma_2$ at the point $P$ is to be determined. Since the
    # target point is on the boundary of the domain it will not be an
    # integration node as we use Gauss quadrature. The reference value is -5.38 MPa.
    
    println("LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole."        )
    t0 = time()
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    nc = 6; # number of elements per side
    nr = 5; # number of elements per side
    nt = 2; # number of elements through the thickness
    # nc = 26; # number of elements per side
    # nr = 25; # number of elements per side
    # nt = 18; # number of elements through the thickness
    tolerance = Thickness/nt/1000.; # Geometrical tolerance
    
    fens,fes = Q4block(1.0, pi/2, nr, nc)
    #
    @assert nt % 2 == 0 "Number of elements through the thickness must be even"
    fens,fes  = H8extrudeQ4(fens, fes,
    nt, (xyz, layer)->[xyz[1], xyz[2], (layer)/nt*Thickness]);
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, box=[1.0, 1.0, 0.0, pi/2, 0.0, Thickness], inflate=tolerance);
    topbfl = selectelem(fens, bdryfes, box=[0.0, 1.0, 0.0, pi/2, Thickness, Thickness], inflate=tolerance);
    
    # Reshape the generated block into the elliptical plate
    for i=1:count(fens)
        r=fens.xyz[i,1]; a=fens.xyz[i,2]; z=fens.xyz[i,3]
        fens.xyz[i,:]=[(r*Ae+(1-r)*Ai)*cos(a) (r*Be+(1-r)*Bi)*sin(a) z];
    end
    
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    l12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, l12, true, 1, 0.0)
    setebc!(u, l12, true, 2, 0.0)
    ll = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    l3 = intersect(ll, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, l3, true, 3, 0.0)
    l1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l1,true, 1, 0.0) # symmetry plane X = 0
    l2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), GaussRule(2, 2)))
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(el1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMSH8(MR, IntegDomain(fes, GaussRule(3, 2)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("$((nc, nr, nt)), $(fld.values[nl,1][1]/phun("MPa"))")
    
    # File =  "LE10NAFEMS_sigmay.vtk"
    # vtkexportmesh(File, fes.conn, geom.values,
    #                FinEtools.MeshExportModule.H8; vectors=[("u", u.values)],
    #                scalars=[("sigmay", fld.values)])
    # @async run(`"paraview.exe" $File`)
    # true
    
    
    AE = AbaqusExporter("LE10NAFEMS_H8");
    HEADING(AE, "LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole.");
    PART(AE, "part1");
    END_PART(AE);
    ASSEMBLY(AE, "ASSEM1");
    INSTANCE(AE, "INSTNC1", "PART1");
    NODE(AE, fens.xyz);
    ELEMENT(AE, "c3d8rh", "AllElements", 1, femm.integdata.fes.conn)
    ELEMENT(AE, "SFM3D4", "TractionElements",
    1+count(femm.integdata.fes), el1femm.integdata.fes.conn)
    NSET_NSET(AE, "l1", l1)
    NSET_NSET(AE, "l2", l2)
    NSET_NSET(AE, "l3", l3)
    NSET_NSET(AE, "l12", l12)
    ORIENTATION(AE, "GlobalOrientation", vec([1. 0 0]), vec([0 1. 0]));
    SOLID_SECTION(AE, "elasticity", "GlobalOrientation", "AllElements", "Hourglassctl");
    SURFACE_SECTION(AE, "TractionElements")
    END_INSTANCE(AE);
    END_ASSEMBLY(AE);
    MATERIAL(AE, "elasticity")
    ELASTIC(AE, E, nu)
    SECTION_CONTROLS(AE, "Hourglassctl", "HOURGLASS=ENHANCED")
    STEP_PERTURBATION_STATIC(AE)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l1", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l2", 2)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l3", 3)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l12", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l12", 2)
    DLOAD(AE, "ASSEM1.INSTNC1.TractionElements", vec([0.0, 0.0, -qmagn]))
    END_STEP(AE)
    close(AE)
    
end # LE10NAFEMS_MSH8_export


function LE10NAFEMS_MST10()
    # Thick elliptical plate with an elliptical hole is clamped on its exterior
    # boundary and is loaded with transverse  pressure.
    # This is a NAFEMS Benchmark, Test No. LE10.
    # The plate is discretized with solid elements.
    # Because of the symmetries of the geometry and load, only quarter of the plate is modeled.
    # The $\sigma_y=\sigma_2$ at the point $P$ is to be determined. Since the
    # target point is on the boundary of the domain it will not be an
    # integration node as we use Gauss quadrature. The reference value is -5.38 MPa.
    
    println("LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole."        )
    t0 = time()
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    ref = 2
    nc = 2^ref*6; # number of elements per side
    nr = 2^ref*5; # number of elements per side
    nt = 2^ref*2; # number of elements through the thickness
    tolerance = Thickness/nt/1000.; # Geometrical tolerance
    
    @assert nt % 2 == 0 "Number of elements through the thickness must be even"
    fens,fes = T10block(1.0, pi/2, Thickness, nr, nc, nt, orientation=:b)
    
    
    # Select the  boundary faces, on the boundary that is clamped,  and on the part
    # of the boundary that is loaded with the transverse pressure
    bdryfes = meshboundary(fes);
    exteriorbfl = selectelem(fens, bdryfes, box=[1.0, 1.0, 0.0, pi/2, 0.0, Thickness], inflate=tolerance);
    topbfl = selectelem(fens, bdryfes, box=[0.0, 1.0, 0.0, pi/2, Thickness, Thickness], inflate=tolerance);
    
    # Reshape the generated block into the elliptical plate
    for i=1:count(fens)
        r=fens.xyz[i,1]; a=fens.xyz[i,2]; z=fens.xyz[i,3]
        fens.xyz[i,:]=[(r*Ae+(1-r)*Ai)*cos(a) (r*Be+(1-r)*Bi)*sin(a) z];
    end
    
    
    geom = NodalField(fens.xyz)
    u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
    
    l12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
    setebc!(u, l12, true, 1, 0.0)
    setebc!(u, l12, true, 2, 0.0)
    ll = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
    l3 = intersect(ll, connectednodes(subset(bdryfes, exteriorbfl)))
    setebc!(u, l3, true, 3, 0.0)
    l1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l1,true, 1, 0.0) # symmetry plane X = 0
    l2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
    setebc!(u,l2,true, 2, 0.0) # symmetry plane Y = 0
    
    applyebc!(u)
    numberdofs!(u)
    
    el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), TriRule(3)))
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    fi = ForceIntensity(FFlt, 3, pfun);
    F2 = distribloads(el1femm, geom, u, fi, 2);
    
    # Note that the material object needs to be created with the proper
    # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
    MR = DeforModelRed3D
    
    material = MatDeforElastIso(MR, E, nu)
    
    femm = FEMMDeforLinearMST10(MR, IntegDomain(fes, TetRule(4)), material)
    
    # The geometry field now needs to be associated with the FEMM
    femm = associategeometry!(femm, geom)
    
    K = stiffness(femm, geom, u)
    K = cholesky(K)
    U = K\(F2)
    scattersysvec!(u, U[:])
    
    nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness],inflate=tolerance);
    thecorneru = zeros(FFlt,1,3)
    gathervalues_asmat!(u, thecorneru, nl);
    thecorneru = thecorneru/phun("mm")
    println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
    
    
    fld= fieldfromintegpoints(femm, geom, u, :Cauchy, 2; nodevalmethod = :averaging, reportat = :extraptrend)#
    println("Sigma_y =$(fld.values[nl,1][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")
    
    println("$((nc, nr, nt)), $(fld.values[nl,1][1]/phun("MPa"))")
    
    # File =  "LE10NAFEMS_MST10_sigmay.vtk"
    # vtkexportmesh(File, fes.conn, geom.values,
    #                FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
    #                scalars=[("sigmay", fld.values)])
    # @async run(`"paraview.exe" $File`)
    # true
    
    
    
    AE = AbaqusExporter("LE10NAFEMS_MST10");
    HEADING(AE, "LE10NAFEMS: Transverse deflection of elliptical plate with elliptical hole.");
    PART(AE, "part1");
    END_PART(AE);
    ASSEMBLY(AE, "ASSEM1");
    INSTANCE(AE, "INSTNC1", "PART1");
    NODE(AE, fens.xyz);
    ELEMENT(AE, "c3d10", "AllElements", 1, femm.integdata.fes.conn)
    ELEMENT(AE, "SFM3D6", "TractionElements",
    1+count(femm.integdata.fes), el1femm.integdata.fes.conn)
    NSET_NSET(AE, "l1", l1)
    NSET_NSET(AE, "l2", l2)
    NSET_NSET(AE, "l3", l3)
    NSET_NSET(AE, "l12", l12)
    ORIENTATION(AE, "GlobalOrientation", vec([1. 0 0]), vec([0 1. 0]));
    SOLID_SECTION(AE, "elasticity", "GlobalOrientation", "AllElements", "Hourglassctl");
    SURFACE_SECTION(AE, "TractionElements")
    END_INSTANCE(AE);
    END_ASSEMBLY(AE);
    MATERIAL(AE, "elasticity")
    ELASTIC(AE, E, nu)
    SECTION_CONTROLS(AE, "Hourglassctl", "HOURGLASS=ENHANCED")
    STEP_PERTURBATION_STATIC(AE)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l1", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l2", 2)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l3", 3)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l12", 1)
    BOUNDARY(AE, "ASSEM1.INSTNC1.l12", 2)
    DLOAD(AE, "ASSEM1.INSTNC1.TractionElements", vec([0.0, 0.0, -qmagn]))
    END_STEP(AE)
    close(AE)
    
end # LE10NAFEMS_MST10


function evaluateerrors(filebase, modeldatasequence)
    println("")
    println("RMS error")
    elementsizes, errornorms, p = evalconvergencestudy(modeldatasequence)
    
    println("Normalized Approximate Error = $(errornorms)")
    
    f = log.(vec(errornorms))
    A = hcat(log.(vec(elementsizes[1:end-1])), ones(size(f)))
    p = A \ f
    println("Linear log-log fit: p = $(p)")
    
    csvFile = filebase * "_Stress" * ".CSV"
    savecsv(csvFile,
    elementsizes=vec(elementsizes[1:end-1]),
    elementsizes2=vec(elementsizes[1:end-1].^2),
    elementsizes3=vec(elementsizes[1:end-1].^3),
    errornorms=vec(errornorms)
    )
    println("Wrote $csvFile")
end

function LE10NAFEMS_MST10_stresses_nodal()
    
    # Note: the stresses measured in the RMS norm will not converge very well: there is a singularity around the clamped face.
    
    elementtag = "MST10"
    println("LE10NAFEMS, 3D version. Element: $(elementtag)")
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    
    for extrapolation in [:extraptrend :extrapmean]
        modeldatasequence = FDataDict[]
        for ref in  [0, 1, 2, 3]
            tolerance = Thickness/2^ref/1000.; # Geometrical tolerance
            
            # nr, nc, nt = 2^ref*5, 2^ref*6, 2^ref*2 # July 5, 2018
            nr, nc, nt = 2^ref*3, 2^ref*4, 2^ref*2
            @assert nt % 2 == 0 "Number of elements through the thickness must be even"
            fens,fes = T10block(1.0, pi/2, Thickness, nr, nc, nt, orientation=:b)
            
            
            # Select the  boundary faces, on the boundary that is clamped,  and on the part
            # of the boundary that is loaded with the transverse pressure
            bdryfes = meshboundary(fes);
            exteriorbfl = selectelem(fens, bdryfes, box=[1.0, 1.0, 0.0, pi/2, 0.0, Thickness], inflate=tolerance);
            topbfl = selectelem(fens, bdryfes, box=[0.0, 1.0, 0.0, pi/2, Thickness, Thickness], inflate=tolerance);
            
            # Reshape the generated block into the elliptical plate
            for i=1:count(fens)
                r=fens.xyz[i,1]; a=fens.xyz[i,2]; z=fens.xyz[i,3]
                fens.xyz[i,:]=[(r*Ae+(1-r)*Ai)*cos(a) (r*Be+(1-r)*Bi)*sin(a) z];
            end
            
            
            geom = NodalField(fens.xyz)
            u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
            
            l12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
            setebc!(u, l12, true, 1, 0.0)
            setebc!(u, l12, true, 2, 0.0)
            ll = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
            l3 = intersect(ll, connectednodes(subset(bdryfes, exteriorbfl)))
            setebc!(u, l3, true, 3, 0.0)
            l1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
            setebc!(u,l1,true, 1, 0.0) # symmetry plane X = 0
            l2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
            setebc!(u,l2,true, 2, 0.0) # symmetry plane Y = 0
            
            applyebc!(u)
            numberdofs!(u)
            
            el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), TriRule(3)))
            fi = ForceIntensity(FFlt, 3, pfun);
            F2 = distribloads(el1femm, geom, u, fi, 2);
            
            # Note that the material object needs to be created with the proper
            # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
            MR = DeforModelRed3D
            
            material = MatDeforElastIso(MR, E, nu)
            
            femm = FEMMDeforLinearMST10(MR, IntegDomain(fes, TetRule(4)), material)
            
            # The geometry field now needs to be associated with the FEMM
            femm = associategeometry!(femm, geom)
            
            K = stiffness(femm, geom, u)
            K = cholesky(K)
            U = K\(F2)
            scattersysvec!(u, U[:])
            
            nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness], inflate=tolerance);
            thecorneru = zeros(FFlt,1,3)
            gathervalues_asmat!(u, thecorneru, nl);
            thecorneru = thecorneru/phun("mm")
            println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
            
            stressfield = fieldfromintegpoints(femm, geom, u, :Cauchy, collect(1:6); nodevalmethod = :averaging, reportat = extrapolation)
            
            # File =  "LE10NAFEMS_MST10_sigmay.vtk"
            # vtkexportmesh(File, fes.conn, geom.values,
            #     FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
            #     scalars=[("sig", stressfield.values)])
            # @async run(`"paraview.exe" $File`)
            modeldata = FDataDict()
            modeldata["fens"] = fens
            modeldata["regions"] = [FDataDict("femm"=>femm)]
            modeldata["targetfields"] = [stressfield]
            modeldata["geom"] = geom
            modeldata["geometricaltolerance"] = tolerance
            modeldata["elementsize"] = 1.0 / 2^ref
            push!(modeldatasequence, modeldata)
        end # for ref 
        
        filebase = "LE10NAFEMS_MST10_stresses_nodal_$(extrapolation)"
        evaluateerrors(filebase, modeldatasequence)
        
    end # for extrapolation
    
end # LE10NAFEMS_MST10_stresses_nodal

function LE10NAFEMS_MSH8_stresses_nodal()
    
    # Note: the stresses measured in the RMS norm will not converge very well: there is a singularity around the clamped face.
    
    elementtag = "MSH8"
    println("LE10NAFEMS, 3D version. Element: $(elementtag)")
    
    E = 210e3*phun("MEGA*PA");# 210e3 MPa
    nu = 0.3;
    qmagn = 1.0*phun("MEGA*PA");# transverse pressure
    sigma_yP = -5.38*phun("MEGA*PA");# tensile stress at [2.0, 0.0] meters
    Ae =3.25*phun("m"); # Major radius of the exterior ellipse
    Be =2.75*phun("m"); # Minor radius of the exterior ellipse
    Ai =2.0*phun("m"); # Major radius of the interior ellipse
    Bi =1.0*phun("m"); # Minor radius of the interior ellipse
    Thickness = 0.6*phun("m")
    function pfun(forceout::FVec{T}, XYZ::FFltMat, tangents::FFltMat, fe_label::FInt) where {T}
        forceout .=  [0.0, 0.0, -qmagn]
        return forceout
    end
    
    for extrapolation in [:extraptrend :extrapmean]
        modeldatasequence = FDataDict[]
        for ref in  [0, 1, 2, 3]
            tolerance = Thickness/2^ref/1000.; # Geometrical tolerance
            
            nr, nc, nt = 2^ref*5, 2^ref*6, 2^ref*2
            @assert nt % 2 == 0 "Number of elements through the thickness must be even"
            fens,fes = H8block(1.0, pi/2, Thickness, nr, nc, nt)
            
            
            # Select the  boundary faces, on the boundary that is clamped,  and on the part
            # of the boundary that is loaded with the transverse pressure
            bdryfes = meshboundary(fes);
            exteriorbfl = selectelem(fens, bdryfes, box=[1.0, 1.0, 0.0, pi/2, 0.0, Thickness], inflate=tolerance);
            topbfl = selectelem(fens, bdryfes, box=[0.0, 1.0, 0.0, pi/2, Thickness, Thickness], inflate=tolerance);
            
            # Reshape the generated block into the elliptical plate
            for i=1:count(fens)
                r=fens.xyz[i,1]; a=fens.xyz[i,2]; z=fens.xyz[i,3]
                fens.xyz[i,:]=[(r*Ae+(1-r)*Ai)*cos(a) (r*Be+(1-r)*Bi)*sin(a) z];
            end
            
            
            geom = NodalField(fens.xyz)
            u = NodalField(zeros(size(fens.xyz,1),3)) # displacement field
            
            l12 =connectednodes(subset(bdryfes, exteriorbfl)) # external boundary
            setebc!(u, l12, true, 1, 0.0)
            setebc!(u, l12, true, 2, 0.0)
            ll = selectnode(fens; box=[0.0, Inf, 0.0, Inf, Thickness/2.0, Thickness/2.0], inflate = tolerance)
            l3 = intersect(ll, connectednodes(subset(bdryfes, exteriorbfl)))
            setebc!(u, l3, true, 3, 0.0)
            l1 =selectnode(fens; box=[0.0, 0.0, 0.0, Inf, 0.0, Thickness], inflate = tolerance)
            setebc!(u,l1,true, 1, 0.0) # symmetry plane X = 0
            l2 =selectnode(fens; box=[0.0, Inf, 0.0, 0.0, 0.0, Thickness], inflate = tolerance)
            setebc!(u,l2,true, 2, 0.0) # symmetry plane Y = 0
            
            applyebc!(u)
            numberdofs!(u)
            
            el1femm =  FEMMBase(IntegDomain(subset(bdryfes,topbfl), GaussRule(2, 2)))
            fi = ForceIntensity(FFlt, 3, pfun);
            F2 = distribloads(el1femm, geom, u, fi, 2);
            
            # Note that the material object needs to be created with the proper
            # model-dimension reduction in mind.  In this case that is the fully three-dimensional solid.
            MR = DeforModelRed3D
            
            material = MatDeforElastIso(MR, E, nu)
            
            femm = FEMMDeforLinearMSH8(MR, IntegDomain(fes, GaussRule(3, 2)), material)
            
            # The geometry field now needs to be associated with the FEMM
            femm = associategeometry!(femm, geom)
            
            K = stiffness(femm, geom, u)
            K = cholesky(K)
            U = K\(F2)
            scattersysvec!(u, U[:])
            
            nl = selectnode(fens, box=[Ai,Ai,0,0,Thickness,Thickness], inflate=tolerance);
            thecorneru = zeros(FFlt,1,3)
            gathervalues_asmat!(u, thecorneru, nl);
            thecorneru = thecorneru/phun("mm")
            println("displacement =$(thecorneru) [MM] as compared to reference [-0.030939, 0, -0.10488] [MM]")
            
            stressfield = fieldfromintegpoints(femm, geom, u, :Cauchy, collect(1:6); nodevalmethod = :averaging, reportat = extrapolation)
            println("Sigma_y =$(stressfield.values[nl,2][1]/phun("MPa")) as compared to reference sigma_yP = $(sigma_yP/phun("MPa")) [MPa]")

            # File =  "LE10NAFEMS_MST10_sigmay.vtk"
            # vtkexportmesh(File, fes.conn, geom.values,
            #     FinEtools.MeshExportModule.T10; vectors=[("u", u.values)],
            #     scalars=[("sig", stressfield.values)])
            # @async run(`"paraview.exe" $File`)
            modeldata = FDataDict()
            modeldata["fens"] = fens
            modeldata["regions"] = [FDataDict("femm"=>femm)]
            modeldata["targetfields"] = [stressfield]
            modeldata["geom"] = geom
            modeldata["geometricaltolerance"] = Thickness/2^ref
            modeldata["parametrictolerance"] = 0.01
            modeldata["elementsize"] = 1.0 / 2^ref
            push!(modeldatasequence, modeldata)
        end # for ref 
        
        filebase = "LE10NAFEMS_MST10_stresses_nodal_$(extrapolation)"
        evaluateerrors(filebase, modeldatasequence)
        
    end # for extrapolation
    
end # LE10NAFEMS_MSH8_stresses_nodal

function allrun()
    println("#####################################################") 
    println("# LE10NAFEMS_Abaqus_fine_MST10 ")
    LE10NAFEMS_Abaqus_fine_MST10()
    println("#####################################################") 
    println("# LE10NAFEMS_Abaqus_MST10 ")
    LE10NAFEMS_Abaqus_MST10()
    println("#####################################################") 
    println("# LE10NAFEMS_MSH8 ")
    LE10NAFEMS_MSH8()
    println("#####################################################") 
    println("# LE10NAFEMS_MSH8_alt_export ")
    LE10NAFEMS_MSH8_alt_export()
    println("#####################################################") 
    println("# LE10NAFEMS_MSH8_export ")
    LE10NAFEMS_MSH8_export()
    println("#####################################################") 
    println("# LE10NAFEMS_MST10 ")
    LE10NAFEMS_MST10()
    println("#####################################################") 
    println("# LE10NAFEMS_MST10_stresses_nodal ")
    LE10NAFEMS_MST10_stresses_nodal()
    println("#####################################################") 
    println("# LE10NAFEMS_MSH8_stresses_nodal ")
    LE10NAFEMS_MSH8_stresses_nodal()
    return true
end # function allrun

end # module LE10NAFEMS_examples
