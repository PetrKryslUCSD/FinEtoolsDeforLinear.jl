var documenterSearchIndex = {"docs":
[{"location":"guide/guide.html#Guide","page":"How to guide","title":"Guide","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The FinEtools package is used here to solve linear stress analysis (deformation) problems.","category":"page"},{"location":"guide/guide.html#Modules","page":"How to guide","title":"Modules","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The package FinEtoolsDeforLinear has the following structure:","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"FinEtoolsDeforLinear is the  top-level module.\nLinear deformation:  AlgoDeforLinearModule (algorithms), DeforModelRedModule (model-reduction definitions, 3D, plane strain and stress, and so on), FEMMDeforLinearBaseModule, FEMMDeforLinearModule, FEMMDeforLinearMSModule, FEMMDeforWinklerModule (FEM machines to evaluate the matrix and vector quantities),  MatDeforModule, MatDeforElastIsoModule, MatDeforElastOrthoModule (elastic material models).","category":"page"},{"location":"guide/guide.html#Linear-deformation-FEM-machines","page":"How to guide","title":"Linear deformation FEM  machines","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"For  the base machine for linear deformation, FEMMDeforLinearBase, assumes standard isoparametric  finite elements. It evaluates  the interior integrals:","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The stiffness matrix, the mass matrix.\nThe load vector corresponding to thermal strains.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Additionally:","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Function to inspect  integration points.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The FEM machine FEMMDeforLinear simply stores the data required by the base FEMMDeforLinearBase.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The machine FEMMDeforWinkler is specialized for the boundary integrals for bodies  supported  on continuously distributed springs:","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Compute the stiffness matrix corresponding to the springs.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The  mean-strain FEM machine FEMMDeforLinearMS implements advanced hexahedral and tetrahedral elements based on multi-field theory and energy-sampling  stabilization. It provides functions to compute:","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The stiffness matrix, the mass matrix.\nThe load vector corresponding to thermal strains.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Additionally it defines:","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Function to inspect  integration points.","category":"page"},{"location":"guide/guide.html#Materials-for-linear-deformation-analysis","page":"How to guide","title":"Materials for linear deformation analysis","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The module MatDeforModule provides functions to convert between vector and matrix (tensor) representations of stress and strain. Further, functions to rotate stress and strain between different coordinate systems (based upon the model-reduction type, 3-D, 2-D, or 1-D) are provided.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Currently  there are material types for isotropic and orthotropic linear elastic materials. The user may add  additional material types by deriving from AbstractMatDefor and equipping them with three methods: (1) compute the tangent moduli, (2) update the material state, (3) compute the thermal strain.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"For full generality, material types  should implement these methods for fully three-dimensional, plane strain and plane stress, 2D axially symmetric, and one-dimensional deformation models.","category":"page"},{"location":"guide/guide.html#Linear-deformation-algorithms","page":"How to guide","title":"Linear deformation algorithms","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"There are algorithms for","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Linear static analysis;\nExport  of the deformed shape for visualization;\nExport  of the nodal and elementwise stress fields for visualization;\nModal (free-vibration) analysis;\nExport  of modal shapes for visualization;\nSubspace-iteration method implementation.","category":"page"},{"location":"guide/guide.html#Model-data","page":"How to guide","title":"Model data","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"Model data is a dictionary, with string keys, and arbitrary values. The documentation string for each method of an algorithm lists the required input. For instance, for the method linearstatics of the AlgoDeforLinearModule, the modeldata dictionary needs to provide key-value pairs for the finite element node set, and the regions, the boundary conditions, and so on.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The modeldata may be also supplemented with additional key-value pairs inside an algorithm and returned for further processing by other algorithms.","category":"page"},{"location":"index.html#FinEtoolsDeforLinear-Documentation","page":"Home","title":"FinEtoolsDeforLinear Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The FinEtools package is used here to solve linear deformation static and dynamic problems.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Tutorials  are provided in the form of Julia scripts and Markdown files in a dedicated folder: index of tutorials. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Conceptual-guide","page":"Home","title":"Conceptual guide","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The construction of the toolkit is described: the composition of modules, the basic data structures, the methodology of computing quantities required in the finite element methodology, and more.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"guide/guide.md\",\n]\nDepth = 1","category":"page"},{"location":"index.html#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The description of the types and the functions, organized by module and/or other logical principle.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"man/man.md\",\n]\nDepth = 2","category":"page"},{"location":"index.html#Tutorials","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The tutorials are provided in the form of Julia scripts and Markdown files in the tutorials folder. ","category":"page"},{"location":"man/man.html#Reference-Manual","page":"Reference Manual","title":"Reference Manual","text":"","category":"section"},{"location":"man/man.html#Simple-FE-model-(volume)","page":"Reference Manual","title":"Simple FE model (volume)","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.FEMMDeforLinearBaseModule, FinEtoolsDeforLinear.FEMMDeforLinearModule,  ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtools.FEMMBaseModule.inspectintegpoints-Union{Tuple{F}, Tuple{IT}, Tuple{TFT}, Tuple{UFT}, Tuple{GFT}, Tuple{FEMM}, Tuple{FEMM, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}, AbstractVector{IT}, F, Any}, Tuple{FEMM, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}, AbstractVector{IT}, F, Any, Any}} where {FEMM<:AbstractFEMMDeforLinear, GFT<:Number, UFT<:Number, TFT<:Number, IT<:Integer, F<:Function}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.inspectintegpoints","text":"inspectintegpoints(self::FEMM, geom::NodalField{GFT},  u::NodalField{UFT}, dT::NodalField{TFT}, felist::AbstractVector{IT}, inspector::F, idat, quantity=:Cauchy; context...) where {FEMM<:AbstractFEMMDeforLinear, GFT<:Number, UFT<:Number, TFT<:Number, IT<:Integer, F<:Function}\n\nInspect integration point quantities.\n\ngeom - reference geometry field\nu - displacement field\ndT - temperature difference field\nfelist - indexes of the finite elements that are to be inspected: The fes to be included are: fes[felist].\ncontext    - structure: see the update!() method of the material.\ninspector - functionwith the signature idat = inspector(idat, j, conn, x, out, loc); where idat - a structure or an array that the inspector may use to maintain some state,  for instance minimum or maximum of stress, j is the element number, conn is the element connectivity, out is the output of the update!() method,  loc is the location of the integration point in the reference configuration.\n\nReturn\n\nThe updated inspector data is returned.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.infsup_gh-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{AbstractFEMMDeforLinear, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT, UFT}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.infsup_gh","text":"infsup_gh(self::AbstractFEMMDeforLinear, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT, UFT}\n\nCompute the matrix to produce the norm of the divergence of the displacement.\n\nThis matrix is used in the numerical infsup test (Klaus-Jurgen Bathe, The inf-sup condition and its evaluation for mixed finite element methods, Computers and Structures 79 (2001) 243-252.)\n\nnote: Note\n\n\nThis computation has not been optimized in any way. It can be expected to be inefficient.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.infsup_sh-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{AbstractFEMMDeforLinear, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.infsup_sh","text":"infsup_sh(self::AbstractFEMMDeforLinear, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the matrix to produce the seminorm of the displacement (square root of the sum of the squares of the derivatives of the components of displacement).\n\nThis matrix is used in the numerical infsup test (Klaus-Jurgen Bathe, The inf-sup condition and its evaluation for mixed finite element methods, Computers and Structures 79 (2001) 243-252.)\n\nnote: Note\n\n\nThis computation has not been optimized in any way. It can be expected to be inefficient.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.mass-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{AbstractFEMMDeforLinear, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.mass","text":"mass(self::AbstractFEMMDeforLinear,  assembler::A,  geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the consistent mass matrix\n\nThis is a general routine for the abstract linear-deformation  FEMM.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FEMM}, Tuple{FEMM, A, NodalField{GFT}, NodalField{UFT}}} where {FEMM<:AbstractFEMMDeforLinear, A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness","text":"stiffness(self::FEMM, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {FEMM<:AbstractFEMMDeforLinear, A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute and assemble  stiffness matrix.\n\nnote: Note\nThe material stiffness matrix is assumed to be the same at all the points of the domain (homogeneous material).\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.thermalstrainloads-Union{Tuple{TFT}, Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{AbstractFEMMDeforLinear, A, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}}} where {A<:AbstractSysvecAssembler, GFT<:Number, UFT<:Number, TFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.thermalstrainloads","text":"thermalstrainloads(self::AbstractFEMMDeforLinear, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}, dT::NodalField{TFT}) where {A<:AbstractSysvecAssembler, GFT<:Number, UFT<:Number, TFT<:Number}\n\nCompute the thermal-strain load vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.AbstractFEMMDeforLinear","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.AbstractFEMMDeforLinear","text":"AbstractFEMMDeforLinear <: AbstractFEMMBase\n\nAbstract type of FEMM for linear deformation.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearModule.FEMMDeforLinear","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearModule.FEMMDeforLinear","text":"FEMMDeforLinear{MR<:AbstractDeforModelRed,  S<:AbstractFESet, F<:Function, M<:AbstractMatDeforLinearElastic} <: AbstractFEMMDeforLinear\n\nClass for linear deformation finite element modeling machine.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearModule.FEMMDeforLinear-Union{Tuple{M}, Tuple{F}, Tuple{S}, Tuple{MR}, Tuple{Type{MR}, IntegDomain{S, F}, M}} where {MR<:AbstractDeforModelRed, S<:AbstractFESet, F<:Function, M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearModule.FEMMDeforLinear","text":"FEMMDeforLinear(mr::Type{MR}, integdomain::IntegDomain{S, F}, material::M) where {MR<:AbstractDeforModelRed, S<:AbstractFESet, F<:Function, M<:AbstractMatDeforLinearElastic}\n\nConstructor of linear deformation finite element modeling machine.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Simple-FE-models-(surface)","page":"Reference Manual","title":"Simple FE models (surface)","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.FEMMDeforWinklerModule,  FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule, ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforWinklerModule.surfacenormalspringstiffness-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FEMMDeforWinkler, A, NodalField{GFT}, NodalField{UFT}, UFT, SurfaceNormal}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforWinklerModule.surfacenormalspringstiffness","text":"surfacenormalspringstiffness(self::FEMMDeforWinkler, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}, springconstant::UFT, surfacenormal::SurfaceNormal) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the stiffness matrix of surface normal spring.\n\nRationale: consider continuously distributed springs between the surface of the solid body and the 'ground', in the direction normal to the surface. If the spring coefficient becomes large, we have an approximate method of enforcing the normal displacement to the surface.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforWinklerModule.FEMMDeforWinkler","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforWinklerModule.FEMMDeforWinkler","text":"FEMMDeforWinkler{S<:AbstractFESet, F<:Function} <: AbstractFEMM\n\nType for normal spring support  (Winkler).\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule.dampingABC-Union{Tuple{FT}, Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FEMMDeforSurfaceDamping, A, NodalField{GFT}, NodalField{UFT}, FT, SurfaceNormal}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number, FT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule.dampingABC","text":"dampingABC(self::FEMMDeforSurfaceDamping, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}, impedance::UFT, surfacenormal::SurfaceNormal) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the damping matrix associated with absorbing boundary conditions (ABC).\n\nCompute the damping matrix associated with absorbing boundary conditions (ABC) representation of the effect of infinite extent of inviscid fluid next to the surface.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule.FEMMDeforSurfaceDamping","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule.FEMMDeforSurfaceDamping","text":"FEMMDeforSurfaceDamping{S<:AbstractFESet, F<:Function} <: AbstractFEMM\n\nType for surface damping model.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#Advanced:-Mean-strain-FEM","page":"Reference Manual","title":"Advanced: Mean-strain FEM","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.FEMMDeforLinearMSModule, ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtools.FEMMBaseModule.associategeometry!-Union{Tuple{GFT}, Tuple{F}, Tuple{F, NodalField{GFT}}} where {F<:FEMMDeforLinearMSH8, GFT}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::F,  geom::NodalField{GFT}) where {F<:FEMMDeforLinearMSH8, GFT}\n\nAssociate geometry field with the FEMM.\n\nCompute the  correction factors to account for  the shape of the  elements.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtools.FEMMBaseModule.associategeometry!-Union{Tuple{GFT}, Tuple{F}, Tuple{F, NodalField{GFT}}} where {F<:FEMMDeforLinearMST10, GFT}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::F,  geom::NodalField{GFT}) where {F<:FEMMDeforLinearMST10, GFT}\n\nAssociate geometry field with the FEMM.\n\nCompute the  correction factors to account for  the shape of the  elements.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtools.FEMMBaseModule.inspectintegpoints-Union{Tuple{F}, Tuple{IT}, Tuple{TFT}, Tuple{UFT}, Tuple{GFT}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}, Vector{IT}, F, Any}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}, Vector{IT}, F, Any, Any}} where {GFT<:Number, UFT<:Number, TFT<:Number, IT, F<:Function}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.inspectintegpoints","text":"inspectintegpoints(\n    self::AbstractFEMMDeforLinearMS,\n    geom::NodalField{GFT},\n    u::NodalField{UFT},\n    dT::NodalField{TFT},\n    felist::Vector{IT},\n    inspector::F,\n    idat,\n    quantity = :Cauchy;\n    context...,\n) where {GFT<:Number,UFT<:Number,TFT<:Number,IT,F<:Function}\n\nInspect integration point quantities.\n\nArguments\n\ngeom - reference geometry field\nu - displacement field\ndT - temperature difference field\nfelist - indexes of the finite elements that are to be inspected: The fes to be included are: fes[felist].\ncontext    - structure: see the update!() method of the material.\ninspector - functionwith the signature idat = inspector(idat, j, conn, x, out, loc); where idat - a structure or an array that the inspector may use to maintain some state,  for instance minimum or maximum of stress, j is the element number, conn is the element connectivity, out is the output of the update!() method,  loc is the location of the integration point in the reference configuration.\n\nReturn\n\nThe updated inspector data is returned.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness","text":"stiffness(self::AbstractFEMMDeforLinearMS, assembler::A,\ngeom::NodalField{GFT},\nu::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute and assemble  stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.infsup_gh-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.infsup_gh","text":"infsup_gh(self::AbstractFEMMDeforLinearMS, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the matrix to produce the norm of the divergence of the displacement.\n\nThis matrix is used in the numerical infsup test (Klaus-Jurgen Bathe, The inf-sup condition and its evaluation for mixed finite element methods, Computers and Structures 79 (2001) 243-252.)\n\nnote: Note\n\n\nThis computation has not been optimized in any way. It can be expected to be inefficient.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.infsup_sh-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.infsup_sh","text":"infsup_sh(self::AbstractFEMMDeforLinearMS, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the matrix to produce the seminorm of the displacement (square root of the sum of the squares of the derivatives of the components of displacement).\n\nThis matrix is used in the numerical infsup test (Klaus-Jurgen Bathe, The inf-sup condition and its evaluation for mixed finite element methods, Computers and Structures 79 (2001) 243-252.)\n\nnote: Note\n\n\nThis computation has not been optimized in any way. It can be expected to be inefficient.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.AbstractFEMMDeforLinearMS","text":"AbstractFEMMDeforLinearMS <: AbstractFEMMDeforLinear\n\nAbstract type for mean-strain linear deformation FEMM.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMSH8","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMSH8","text":"mutable struct FEMMDeforLinearMSH8{\n    MR<:AbstractDeforModelRed,\n    ID<:IntegDomain{S,F} where {S<:FESetH8,F<:Function},\n    CS<:CSys,\n    M<:AbstractMatDeforLinearElastic,\n    MS<:MatDeforElastIso,\n} <: AbstractFEMMDeforLinearMS\n\nType for mean-strain linear deformation FEMM based on eight-node hexahedral elements.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMSH8-Union{Tuple{M}, Tuple{CS}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, CS, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), CS<:CSys, M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMSH8","text":"FEMMDeforLinearMSH8(\n    mr::Type{MR},\n    integdomain::ID,\n    mcsys::CS,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetH8}, CS<:CSys, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMSH8-Union{Tuple{M}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMSH8","text":"FEMMDeforLinearMSH8(\n    mr::Type{MR},\n    integdomain::ID,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetH8}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMST10","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMST10","text":"mutable struct FEMMDeforLinearMST10{\n    MR<:AbstractDeforModelRed,\n    ID<:IntegDomain{S,F} where {S<:FESetT10,F<:Function},\n    CS<:CSys,\n    M<:AbstractMatDeforLinearElastic,\n    MS<:MatDeforElastIso,\n} <: AbstractFEMMDeforLinearMS\n\nType for mean-strain linear deformation FEMM based on 10-node tetrahedral elements.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMST10-Union{Tuple{M}, Tuple{CS}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, CS, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetT10), CS<:CSys, M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMST10","text":"FEMMDeforLinearMST10(\n    mr::Type{MR},\n    integdomain::ID,\n    mcsys::CS,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetT10}, CS<:CSys, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMST10-Union{Tuple{M}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetT10), M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule.FEMMDeforLinearMST10","text":"FEMMDeforLinearMST10(\n    mr::Type{MR},\n    integdomain::ID,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetT10}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Advanced:-Nodal-integration","page":"Reference Manual","title":"Advanced: Nodal integration","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.FEMMDeforLinearNICEModule, FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule, ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtools.FEMMBaseModule.associategeometry!-Union{Tuple{GFT}, Tuple{F}, Tuple{F, NodalField{GFT}}} where {F<:FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.AbstractFEMMDeforLinearNICE, GFT}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::F,\n    geom::NodalField{GFT}) where {F <: AbstractFEMMDeforLinearNICE, GFT}\n\nAssociate geometry field with the FEMM.\n\nCompute the  correction factors to account for  the shape of the  elements.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.AbstractFEMMDeforLinearNICE, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness","text":"stiffness(self::AbstractFEMMDeforLinearNICE,\n    assembler::A,\n    geom::NodalField{GFT},\n    u::NodalField{UFT}) where {A <: AbstractSysmatAssembler, GFT <: Number, UFT <: Number}\n\nCompute and assemble  stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness-Union{Tuple{UFT}, Tuple{GFT}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.AbstractFEMMDeforLinearNICE, NodalField{GFT}, NodalField{UFT}}} where {GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness","text":"stiffness(self::AbstractFEMMDeforLinearNICE,\n    geom::NodalField{GFT},\n    u::NodalField{UFT}) where {GFT <: Number, UFT <: Number}\n\nCompute and assemble  stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.AbstractFEMMDeforLinearNICE","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.AbstractFEMMDeforLinearNICE","text":"AbstractFEMMDeforLinearNICE <: AbstractFEMMDeforLinear\n\nAbstract FEMM type for Nodally Integrated Continuum Elements (NICE).\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.FEMMDeforLinearNICEH8","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.FEMMDeforLinearNICEH8","text":"mutable struct FEMMDeforLinearNICEH8{\n    MR <: AbstractDeforModelRed,\n    S <: FESetH8,\n    F <: Function,\n    M <: AbstractMatDeforLinearElastic,\n} <: AbstractFEMMDeforLinearNICE\n\nFEMM type for Nodally Integrated Continuum Elements (NICE) based on the eight-node hexahedron.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.FEMMDeforLinearNICET4","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearNICEModule.FEMMDeforLinearNICET4","text":"mutable struct FEMMDeforLinearNICET4{\n    MR <: AbstractDeforModelRed,\n    S <: FESetT4,\n    F <: Function,\n    M <: AbstractMatDeforLinearElastic,\n} <: AbstractFEMMDeforLinearNICE\n\nFEMM type for Nodally Integrated Continuum Elements (NICE) based on the 4-node tetrahedron.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtools.FEMMBaseModule.associategeometry!-Union{Tuple{GFT}, Tuple{F}, Tuple{F, NodalField{GFT}}} where {F<:FEMMDeforLinearESNICEH8, GFT}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::F,  geom::NodalField{GFT}) where {F<:FEMMDeforLinearESNICEH8, GFT}\n\nAssociate geometry field with the FEMM.\n\nCompute the  correction factors to account for  the shape of the  elements.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtools.FEMMBaseModule.associategeometry!-Union{Tuple{GFT}, Tuple{F}, Tuple{F, NodalField{GFT}}} where {F<:FEMMDeforLinearESNICET4, GFT}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::F,  geom::NodalField{GFT}; stabilization_parameters = _T4_stabilization_parameters) where {F<:FEMMDeforLinearESNICET4, GFT}\n\nAssociate geometry field with the FEMM.\n\nCompute the  correction factors to account for  the shape of the  elements.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtools.FEMMBaseModule.inspectintegpoints-Union{Tuple{F}, Tuple{IT}, Tuple{TFT}, Tuple{UFT}, Tuple{GFT}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}, Vector{IT}, F, Any}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE, NodalField{GFT}, NodalField{UFT}, NodalField{TFT}, Vector{IT}, F, Any, Any}} where {GFT<:Number, UFT<:Number, TFT<:Number, IT<:Integer, F<:Function}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.inspectintegpoints","text":"inspectintegpoints(self::AbstractFEMMDeforLinearESNICE, geom::NodalField{GFT},  u::NodalField{UFT}, dT::NodalField{TFT}, felist::Vector{IT}, inspector::F,  idat, quantity=:Cauchy; context...) where {GFT<:Number, UFT<:Number, TFT<:Number, IT<:Integer, F<:Function}\n\nInspect integration point quantities.\n\nArguments\n\ngeom - reference geometry field\nu - displacement field\ndT - temperature difference field\nfelist - indexes of the finite elements that are to be inspected: The fes to be included are: fes[felist].\ncontext    - structure: see the update!() method of the material.\ninspector - functionwith the signature idat = inspector(idat, j, conn, x, out, loc); where idat - a structure or an array that the inspector may use to maintain some state,  for instance minimum or maximum of stress, j is the element number, conn is the element connectivity, out is the output of the update!() method,  loc is the location of the integration point in the reference configuration.\n\nReturn\n\nThe updated inspector data is returned.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness-Union{Tuple{T}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE, A, NodalField{GFT}, NodalField{T}}} where {A<:AbstractSysmatAssembler, GFT<:Number, T<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness","text":"stiffness(self::AbstractFEMMDeforLinearESNICE, assembler::A, geom::NodalField{GFT}, u::NodalField{T}) where {A<:AbstractSysmatAssembler, GFT<:Number, T<:Number}\n\nCompute and assemble  stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.infsup_gh-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.infsup_gh","text":"infsup_gh(self::AbstractFEMMDeforLinearESNICE, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the matrix to produce the norm of the divergence of the displacement.\n\nThis matrix is used in the numerical infsup test (Klaus-Jurgen Bathe, The inf-sup condition and its evaluation for mixed finite element methods, Computers and Structures 79 (2001) 243-252.)\n\nnote: Note\n\n\nThis computation has not been optimized in any way. It can be expected to be inefficient.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.infsup_sh-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.infsup_sh","text":"infsup_sh(self::AbstractFEMMDeforLinearESNICE, assembler::A, geom::NodalField{GFT}, u::NodalField{UFT}) where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}\n\nCompute the matrix to produce the seminorm of the displacement (square root of the sum of the squares of the derivatives of the components of displacement).\n\nThis matrix is used in the numerical infsup test (Klaus-Jurgen Bathe, The inf-sup condition and its evaluation for mixed finite element methods, Computers and Structures 79 (2001) 243-252.)\n\nnote: Note\n\n\nThis computation has not been optimized in any way. It can be expected to be inefficient.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.AbstractFEMMDeforLinearESNICE","text":"AbstractFEMMDeforLinearESNICE <: AbstractFEMMDeforLinear\n\nAbstract FEMM type for Nodally Integrated Continuum Elements (NICE) with energy-sampling stabilization.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICEH8","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICEH8","text":"mutable struct FEMMDeforLinearESNICEH8{\n    MR<:AbstractDeforModelRed,\n    ID<:IntegDomain{S} where {S<:FESetH8},\n    CS<:CSys,\n    M<:AbstractMatDeforLinearElastic,\n    MS<:MatDeforElastIso,\n} <: AbstractFEMMDeforLinearESNICE\n\nFEMM type for Energy-sampling Stabilized Nodally Integrated Continuum Elements (NICE) based on the p-node hexahedron.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICEH8-Union{Tuple{M}, Tuple{CS}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, CS, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), CS<:CSys, M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICEH8","text":"FEMMDeforLinearESNICEH8(\n        mr::Type{MR},\n        integdomain::ID,\n        mcsys::CS,\n        material::M,\n    ) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetH8}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICEH8-Union{Tuple{M}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICEH8","text":"FEMMDeforLinearESNICEH8(\n        mr::Type{MR},\n        integdomain::ID,\n        material::M,\n    ) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetH8}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICET4","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICET4","text":"mutable struct FEMMDeforLinearESNICET4{\n    MR<:AbstractDeforModelRed,\n    ID<:IntegDomain{S} where {S<:FESetT4},\n    CS<:CSys,\n    M<:AbstractMatDeforLinearElastic,\n    MS<:MatDeforElastIso,\n} <: AbstractFEMMDeforLinearESNICE\n\nFEMM type for Energy-sampling Stabilized Nodally Integrated Continuum Elements (NICE) based on the 4-node tetrahedron.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICET4-Union{Tuple{M}, Tuple{CS}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, CS, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetT4), CS<:CSys, M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICET4","text":"FEMMDeforLinearESNICET4(\n    mr::Type{MR},\n    integdomain::ID,\n    mcsys::CS,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetT4}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICET4-Union{Tuple{M}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetT4), M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule.FEMMDeforLinearESNICET4","text":"FEMMDeforLinearESNICET4(\n        mr::Type{MR},\n        integdomain::ID,\n        material::M,\n    ) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S} where {S<:FESetT4}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Advanced:-Incompatible-modes","page":"Reference Manual","title":"Advanced: Incompatible modes","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.FEMMDeforLinearIMModule]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtools.FEMMBaseModule.associategeometry!-Union{Tuple{GFT}, Tuple{F}, Tuple{F, NodalField{GFT}}} where {F<:FEMMDeforLinearIMH8, GFT}","page":"Reference Manual","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::F,  geom::NodalField{GFT}) where {F<:FEMMDeforLinearIMH8, GFT}\n\nAssociate geometry field with the FEMM.\n\nCompute the  correction factors to account for  the shape of the  elements.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness-Union{Tuple{UFT}, Tuple{GFT}, Tuple{A}, Tuple{FEMMDeforLinearIMH8, A, NodalField{GFT}, NodalField{UFT}}} where {A<:AbstractSysmatAssembler, GFT<:Number, UFT<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule.stiffness","text":"stiffness(self::AbstractFEMMDeforLinearIM, assembler::A, geom::NodalField{FFlt}, u::NodalField{T}) where {A<:AbstractSysmatAssembler, T<:Number}\n\nCompute and assemble  stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8","text":"FEMMDeforLinearIMH8{MR<:AbstractDeforModelRed, S<:FESetH8, F<:Function, M<:AbstractMatDeforLinearElastic}\n\nType for mean-strain linear deformation FEMM based on eight-node hexahedral elements with incompatible modes.\n\nDefault number of incompatible modes is 12 (Simo formulation). Alternative is 9 incompatible modes (Wilson formulation).\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8-Union{Tuple{M}, Tuple{CS}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, CS, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), CS<:CSys, M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8","text":"FEMMDeforLinearIMH8(\n    mr::Type{MR},\n    integdomain::ID,\n    mcsys::CS,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S,F} where {S<:FESetH8,F<:Function}, CS<:CSys, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8-Union{Tuple{M}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, M, Int64}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8","text":"FEMMDeforLinearIMH8(\n    mr::Type{MR},\n    integdomain::ID,\n    material::M,\n    nmodes::Int64,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S,F} where {S<:FESetH8,F<:Function}, M<:AbstractMatDeforLinearElastic}\n\nConstructor, with optional configuration of the number of incompatible modes.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8-Union{Tuple{M}, Tuple{ID}, Tuple{MR}, Tuple{Type{MR}, ID, M}} where {MR<:AbstractDeforModelRed, ID<:(IntegDomain{S} where S<:FESetH8), M<:AbstractMatDeforLinearElastic}","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearIMModule.FEMMDeforLinearIMH8","text":"FEMMDeforLinearIMH8(\n    mr::Type{MR},\n    integdomain::ID,\n    material::M,\n) where {MR<:AbstractDeforModelRed, ID<:IntegDomain{S,F} where {S<:FESetH8,F<:Function}, M<:AbstractMatDeforLinearElastic}\n\nConstructor.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Algorithms","page":"Reference Manual","title":"Algorithms","text":"","category":"section"},{"location":"man/man.html#Linear-deformation","page":"Reference Manual","title":"Linear deformation","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.AlgoDeforLinearModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule.exportdeformation-Tuple{Dict{String, Any}}","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule.exportdeformation","text":"AlgoDeforLinearModule.exportdeformation(modeldata::FDataDict)\n\nAlgorithm for exporting of the deformation for visualization in Paraview.\n\nArgument\n\nmodeldata = dictionary with values for keys\n\n\"fens\"  = finite element node set\n\"regions\"  = array of region dictionaries\n\"geom\" = geometry field\n\"u\" = displacement field, or\n\"us\" = array of  tuples (name, displacement field)\n\"postprocessing\" = dictionary  with values for keys\n\"boundary_only\" = should only the boundary of the  regions be rendered? Default is render the interior.\n\"file\" = name of the  postprocessing file\n\nFor each region (connected piece of the domain made of a particular material), mandatory, the  region dictionary  contains values for keys:\n\n\"femm\" = finite element mmodel machine (mandatory);\n\nOutput\n\nmodeldata updated with\n\nmodeldata[\"postprocessing\"][\"exported\"] = array of data dictionaries, one for each exported file. The data is stored with the keys:\n\"file\" - names of exported file    # Defaults\n\"field\" - nodal or elemental field\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule.exportmode-Tuple{Dict{String, Any}}","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule.exportmode","text":"AlgoDeforLinearModule.exportmode(modeldata::FDataDict)\n\nAlgorithm for exporting of the mmode shape for visualization in Paraview.\n\nArgument\n\nmodeldata = dictionary with values for keys\n\n\"fens\"  = finite element node set\n\"regions\"  = array of region dictionaries\n\"geom\" = geometry field\n\"u\" = displacement field\n\"W\" = Computed free-vibration eigenvectors, neigvs columns\n\"omega\" =  Computed free-vibration angular frequencies, array of length neigvs\n\"postprocessing\" = dictionary  with values for keys\n\"boundary_only\" = should only the boundary of the  regions be rendered? Default is render the interior.\n\"file\" = name of the  postprocessing file\n\"mode\" = which mode should be visualized?\n\"component\" = which component of the quantity?\n\"outputcsys\" = output coordinate system\n\nFor each region (connected piece of the domain made of a particular material), mandatory, the  region dictionary  contains values for keys:\n\n\"femm\" = finite element mmodel machine (mandatory);\n\nOutput\n\nmodeldata updated with\n\nmodeldata[\"postprocessing\"][\"exported\"] = see exportdeformation()\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule.exportstress-Tuple{Dict{String, Any}}","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule.exportstress","text":"AlgoDeforLinearModule.exportstress(modeldata::FDataDict)\n\nAlgorithm for exporting of the stress for visualization in Paraview.\n\nArgument\n\nmodeldata = dictionary with values for keys\n\n\"fens\"  = finite element node set\n\"regions\"  = array of region dictionaries\n\"geom\" = geometry field\n\"u\" = displacement field\n\"postprocessing\" = dictionary  with values for keys\n\"boundary_only\" = should only the boundary of the  regions be rendered? Default is render the interior.\n\"file\" = name of the  postprocessing file\n\"quantity\" = quantity to be exported (default :Cauchy)\n\"component\" = which component of the quantity?\n\"outputcsys\" = output coordinate system\n\"inspectormeth\" = inspector method to pass to inspectintegpoints()\n\"extrap\" = method for extrapolating from the quadrature points to the nodes within one element\n\nFor each region (connected piece of the domain made of a particular material), mandatory, the  region dictionary  contains values for keys:\n\n\"femm\" = finite element mmodel machine (mandatory);\n\nOutput\n\nmodeldata updated with\n\nmodeldata[\"postprocessing\"][\"exported\"] = array of data dictionaries, one for each exported file. The data is stored with the keys:\n\"file\" - name of exported file\n\"field\" - nodal field\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule.exportstresselementwise-Tuple{Dict{String, Any}}","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule.exportstresselementwise","text":"AlgoDeforLinearModule.exportstresselementwise(modeldata::FDataDict)\n\nAlgorithm for exporting of the elementwise stress for visualization in Paraview.\n\nArgument\n\nmodeldata = dictionary with values for keys\n\n\"fens\"  = finite element node set\n\"regions\"  = array of region dictionaries\n\"geom\" = geometry field\n\"u\" = displacement field\n\"postprocessing\" = dictionary  with values for keys\n\"boundary_only\" = should only the boundary of the  regions be rendered? Default is render the interior.\n\"file\" = name of the  postprocessing file\n\"quantity\" = quantity to be exported (default :Cauchy)\n\"component\" = which component of the quantity?\n\"outputcsys\" = output coordinate system\n\nFor each region (connected piece of the domain made of a particular material), mandatory, the  region dictionary  contains values for keys:\n\n\"femm\" = finite element mmodel machine (mandatory);\n\nOutput\n\nmodeldata updated with\n\nmodeldata[\"postprocessing\"][\"exported\"] = array of data dictionaries, one for each exported file. The data is stored with the keys:\n\"file\" - name of exported file\n\"field\" - elemental field\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule.linearstatics-Tuple{Dict{String, Any}}","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule.linearstatics","text":"AlgoDeforLinearModule.linearstatics(modeldata::FDataDict)\n\nAlgorithm for static linear deformation (stress) analysis.\n\nArgument\n\nmodeldata = dictionary with values for keys\n\n\"fens\"  = finite element node set\n\"regions\"  = array of region dictionaries\n\"essential_bcs\" = array of essential boundary condition dictionaries\n\"traction_bcs\" = array of traction boundary condition dictionaries\n\"temperature_change\" = dictionary of data for temperature change\n\nFor each region (connected piece of the domain made of a particular material), mandatory, the  region dictionary  contains values for keys:\n\n\"femm\" = finite element model machine (mandatory);\n\nFor essential boundary conditions (optional) each dictionary would hold\n\n\"displacement\" = fixed (prescribed) displacement (scalar),  or a function with signature function w = f(x). If this value is not given, zero displacement is assumed.\n\"component\" = which component is prescribed  (1, 2, 3)?\n\"node_list\" = list of nodes on the boundary to which the condition applies (mandatory)\n\nFor traction boundary conditions (optional) each dictionary would hold key-value pairs\n\n\"femm\" = finite element model machine (mandatory);\n\"traction_vector\" = traction vector,  either  a constant numerical vector, or  a function to be used to construct a ForceIntensity object, or it could be the ForceIntensity object itself.\n\nOutput\n\nmodeldata = the dictionary on input is augmented with the keys\n\n\"geom\" = the nodal field that is the geometry\n\"u\" = the nodal field that is the computed displacement\n\"temp\" = the nodal field that is the temperature change    # For body loads (optional):\n\"work\" = work of the applied loads    # modeldata.bodyload = cell array of struct,\n\"timing\" = dictionary with timing results    #          each piece of the domain can have each its own body load\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule.modal-Tuple{Dict{String, Any}}","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule.modal","text":"AlgoDeforLinearModule.modal(modeldata::FDataDict)\n\nModal (free-vibration) analysis solver.\n\nArgument\n\nmodeldata = dictionary with values for keys\n\n\"fens\"  = finite element node set\n\"regions\"  = array of region dictionaries\n\"essential_bcs\" = array of essential boundary condition dictionaries\n\nFor each region (connected piece of the domain made of a particular material), mandatory, the  region dictionary  contains values for keys:\n\n\"femm\" = finite element mmodel machine (mandatory);\n\nFor essential boundary conditions (optional) each dictionary would hold\n\n\"displacement\" = fixed (prescribed) displacement (scalar): only zero displacement is  allowed for modal analysis.\n\"component\" = which component is prescribed  (1, 2, 3)?\n\"node_list\" = list of nodes on the boundary to which the condition applies (mandatory)\n\nControl parameters:\n\n\"neigvs\" = number of eigenvalues/eigenvectors to compute\n\"omega_shift\"= angular frequency shift for mass shifting\n\"use_lumped_mass\" = true or false?  (Default is false: consistent mass)\n\nOutput\n\nmodeldata= the dictionary on input is augmented with\n\n\"geom\" = the nodal field that is the geometry\n\"u\" = the nodal field that is the computed displacement\n\"neigvs\" = Number of computed eigenvectors\n\"W\" = Computed eigenvectors, neigvs columns\n\"omega\" =  Computed angular frequencies, array of length neigvs    # For multi point constraints (MPC) (optional):\n\"raw_eigenvalues\" = Raw computed eigenvalues    # model_data.mpc= cell array of structs, each for one MPC.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Material-models","page":"Reference Manual","title":"Material models","text":"","category":"section"},{"location":"man/man.html#Material-for-deformation,-base-functionality","page":"Reference Manual","title":"Material for deformation, base functionality","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.MatDeforModule, ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.dett-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.dett","text":"dett(::Type{DeforModelRed2DStrain},  C::Matrix{T}) where {T}\n\nCompute the determinant of a general square matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.dett-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.dett","text":"dett(::Type{DeforModelRed3D},  C::Matrix{T}) where {T}\n\nCompute the determinant of a general square matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.rotstressvec!-Union{Tuple{T}, Tuple{Type{DeforModelRed1DStress}, Vector{T}, Vector{T}, Union{Matrix{T}, LinearAlgebra.Transpose{T, Matrix{T}}} where T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.rotstressvec!","text":"rotstressvec!(::Type{DeforModelRed1D},  outstress::Vector{T},  instress::Vector{T},  Rm::_RotationMatrix) where {T}\n\nRotate the stress vector by the supplied rotation matrix.\n\nCalculate the rotation of the stress vector to the 'bar' coordinate system given by the columns of the rotation matrix Rm.\n\noutstress = output stress vector, overwritten inside\ninstress = input stress vector\nRm = columns are components of 'bar' basis vectors on the 'plain'    basis vectors\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.rotstressvec!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DAxisymm}, Vector{T}, Vector{T}, Union{Matrix{T}, LinearAlgebra.Transpose{T, Matrix{T}}} where T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.rotstressvec!","text":"rotstressvec!(::Type{DeforModelRed2DAxisymm},  outstress::Vector{T},  instress::Vector{T},  Rm::_RotationMatrix) where {T}\n\nRotate the stress vector by the supplied rotation matrix.\n\nCalculate the rotation of the stress vector to the 'bar' coordinate system given by the columns of the rotation matrix Rm.\n\noutstress = output stress vector, overwritten inside\ninstress = input stress vector\nRm = columns are components of 'bar' basis vectors on the 'plain'    basis vectors\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.rotstressvec!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Vector{T}, Vector{T}, Union{Matrix{T}, LinearAlgebra.Transpose{T, Matrix{T}}} where T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.rotstressvec!","text":"rotstressvec!(::Type{DeforModelRed2DStrain},  outstress::Vector{T},  instress::Vector{T},  Rm::_RotationMatrix) where {T}\n\nRotate the stress vector by the supplied rotation matrix.\n\nCalculate the rotation of the stress vector to the 'bar' coordinate system given by the columns of the rotation matrix Rm.\n\noutstress = output stress vector, overwritten inside\ninstress = input stress vector\nRm = columns are components of 'bar' basis vectors on the 'plain'    basis vectors\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.rotstressvec!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStress}, Vector{T}, Vector{T}, Union{Matrix{T}, LinearAlgebra.Transpose{T, Matrix{T}}} where T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.rotstressvec!","text":"rotstressvec!(::Type{DeforModelRed2DStress},  outstress::Vector{T},  instress::Vector{T},  Rm::_RotationMatrix) where {T}\n\nRotate the stress vector by the supplied rotation matrix.\n\nCalculate the rotation of the stress vector to the 'bar' coordinate system given by the columns of the rotation matrix Rm.\n\noutstress = output stress vector, overwritten inside\ninstress = input stress vector\nRm = columns are components of 'bar' basis vectors on the 'plain'    basis vectors\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.rotstressvec!-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Vector{T}, Vector{T}, Union{Matrix{T}, LinearAlgebra.Transpose{T, Matrix{T}}} where T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.rotstressvec!","text":"rotstressvec!(::Type{DeforModelRed3D},  outstress::Vector{T},  instress::Vector{T}, Rm::_RotationMatrix) where {T}\n\nRotate the stress vector by the supplied rotation matrix.\n\nCalculate the rotation of the stress vector to the 'bar' coordinate system given by the columns of the rotation matrix Rm.\n\noutstress = output stress vector, overwritten inside\ninstress = input stress vector\nRm = columns are components of 'bar' basis vectors on the 'plain'    basis vectors\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainttov!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Vector{T}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainttov!","text":"strainttov!(::Type{DeforModelRed2DStrain}, v::Vector{T}, t::Matrix{T}) where {T}\n\nConvert a symmetric matrix of 2x2 strain components  into a 3-component vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainttov!-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Vector{T}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainttov!","text":"strainttov!(::Type{DeforModelRed3D}, v::Vector{T}, t::Matrix{T}) where {T}\n\nConvert a symmetric matrix of 3x3 strain components  into a 6-component vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainvdet-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainvdet","text":"strainvdet(::Type{DeforModelRed2DStrain},  Cv::Vector{T}) where {T}\n\nCompute the determinant of a symmetric strain-like square matrix represented as a vector. Remember that the shear strain components are twice the entries of the matrix representation.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainvdet-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainvdet","text":"strainvdet(::Type{DeforModelRed3D},  Cv::Vector{T}) where {T}\n\nCompute the determinant of a symmetric strain-like square matrix represented as a vector. Remember that the shear strain components are twice the entries of the matrix representation.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainvtot!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Matrix{T}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainvtot!","text":"strainvtot!(::Type{DeforModelRed2DStrain}, t::Matrix{T}, v::Vector{T}) where {T}\n\nConvert a strain 3-vector to a  matrix of 2x2 strain components (symmetric tensor).\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainvtot!-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Matrix{T}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainvtot!","text":"strainvtot!(::Type{DeforModelRed3D}, t::Matrix{T}, v::Vector{T}) where {T}\n\nConvert a strain 3-vector to a  matrix of 2x2 strain components (symmetric tensor).\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainvtr-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainvtr","text":"strainvtr(::Type{DeforModelRed2DStrain},  Cv::Vector{T}) where {T}\n\nCompute the trace of a symmetric strain-like square matrix represented as a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.strainvtr-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.strainvtr","text":"strainvtr(::Type{DeforModelRed3D},  Cv::Vector{T}) where {T}\n\nCompute the trace of a symmetric strain-like square matrix represented as a vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressttov!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Vector{T}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressttov!","text":"stressttov!(::Type{DeforModelRed2DStrain}, v::Vector{T}, t::Matrix{T}) where {T}\n\nConvert a symmetric matrix of 2x2 stress components to a 3-component vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressttov!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStress}, Vector{T}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressttov!","text":"stressttov!(::Type{DeforModelRed2DStress}, v::Vector{T}, t::Matrix{T}) where {T}\n\nConvert a symmetric matrix of 2x2 stress components to a 3-component vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressttov!-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Vector{T}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressttov!","text":"stressttov!(::Type{DeforModelRed3D}, v::Vector{T}, t::Matrix{T}) where {T}\n\nConvert a symmetric matrix of 3x3 stress components to a 6-component vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressvtot!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DAxisymm}, Matrix{T}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressvtot!","text":"stressvtot!(::Type{DeforModelRed2DAxisymm}, t::Matrix{T}, v::Vector{T}) where {T}\n\nConvert a 4-vector to a  matrix of 3x3 stress components (tensor).\n\nConvert a 4-vector to a symmetric matrix of 3x3 stress components (tensor).\n\nThe stress vector components need to be ordered as:     sigmax, sigmay, sigmaz, tauxy.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressvtot!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStrain}, Matrix{T}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressvtot!","text":"stressvtot!(::Type{DeforModelRed2DStrain}, t::Matrix{T}, v::Vector{T}) where {T}\n\nConvert a vector to a  matrix of 2x2 stress components (symmetric tensor).\n\nIf v has 4 entries, also the t[3,3] matrix entry is set.\n\nThe stress vector components need to be ordered as:     sigmax, sigmay, tauxy, sigmaz, which is the ordering used for the plane-strain model reduction.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressvtot!-Union{Tuple{T}, Tuple{Type{DeforModelRed2DStress}, Matrix{T}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressvtot!","text":"stressvtot!(::Type{DeforModelRed2DStress}, t::Matrix{T}, v::Vector{T}) where {T}\n\nConvert a 3-vector to a  matrix of 2x2 stress components (symmetric tensor).\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.stressvtot!-Union{Tuple{T}, Tuple{Type{DeforModelRed3D}, Matrix{T}, Vector{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.stressvtot!","text":"stressvtot!(::Type{DeforModelRed3D}, t::Matrix{T}, v::Vector{T}) where {T}\n\nConvert a 6-vector to a  matrix of 3x3 stress components (symmetric tensor).\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4checksymmetry-Tuple{Any}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4checksymmetry","text":"tens4checksymmetry(C4th)\n\nIf the fourth-order tensor of material elasticity has the full set of symmetries, return true; otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4deviator!-Union{Tuple{Array{T, 4}}, Tuple{T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4deviator!","text":"tens4deviator!(t::Array{T, 4}) where {T}\n\nCompute 4th-order deviator tensor.\n\nDouble contraction of a second order tensor with this fourth-order tensor produces the deviator part of the second order tensor.\n\nExample\n\nThe product of the deviator tensor with the second-order tensor S is \n\nt = fill(0.0, 3, 3, 3, 3)\ntens4deviator!(t)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\ntens4dot2!(tS, t, S)\n@show tr((S - tr(S)/3*I) ), tr(tS)\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4dot2!-Union{Tuple{T}, Tuple{Matrix{T}, Array{T, 4}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4dot2!","text":"tens4dot2!(R::Array{T, 2}, F::Array{T, 4}, S::Array{T, 2}) where {T}\n\nCompute the double contraction of a 4th-order and a 2nd-order tensors.\n\nnote: Note\n\n\nThe double contraction  of two second-order sensors is defined as  A:B = tr(A'*B) = A_ij B_ij\n\nThe resulting second-order tensor is first zeroed out, and then the result is accumulated.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4identity!-Union{Tuple{Array{T, 4}}, Tuple{T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4identity!","text":"tens4identity!(t::Array{T, 4}) where {T}\n\nCompute 4th-order identity tensor.\n\nExample\n\nThe product of the identity tensor with the second-order tensor S is \n\nt = fill(0.0, 3, 3, 3, 3)\ntens4identity!(t)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\ntens4dot2!(tS, t, S)\n@show S - tS\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4ijkl!-Union{Tuple{FB}, Tuple{FA}, Tuple{T}, Tuple{Array{T, 4}, FA, FB}} where {T, FA, FB}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4ijkl!","text":"tens4ijkl!(t::Array{T, 4}, A::FA, B::FB, op = :+) where {T, FA, FB}\n\nFill a 4th-order tensor as a dyadic product of two 2nd-order tensors.\n\nThe i,j,k,l component is given as t[i,j,k,l]=A(i,j)*B(k,l).\n\nnote: Note\n\n\nThe tensor is accumulated to. It needs to be initialized to zero, if that is desired as the initial state.\n\nExample\n\nt = fill(0.0, 3, 3, 3, 3)\ndelta = (I, J) -> I == J ? 1.0 : 0.0\ntens4ijkl!(t, delta, delta)\nS = rand(3, 3)\n@show tr(S) * I\ntS = fill(0.0, 3, 3)\n@show tens4dot2!(tS, t, S)\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4ikjl!-Union{Tuple{FB}, Tuple{FA}, Tuple{T}, Tuple{Array{T, 4}, FA, FB}} where {T, FA, FB}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4ikjl!","text":"tens4ikjl!(t::Array{T, 4}, A::FA, B::FB) where {T, FA, FB}\n\nFill a 4th-order tensor as a dyadic product of two 2nd-order tensors.\n\nThe i,j,k,l component is given as t[i,j,k,l]=A(i,k)*B(j,l).\n\nnote: Note\n\n\nThe tensor is accumulated to. It needs to be initialized to zero, if that is desired as the initial state.\n\nExample\n\nt = fill(0.0, 3, 3, 3, 3)\ndelta = (I, J) -> I == J ? 1.0 : 0.0\ntens4ikjl!(t, delta, delta)\nS = rand(3, 3)\n@show transpose(S) \ntS = fill(0.0, 3, 3)\n@show transpose(S) - tens4dot2!(tS, t, S)\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4iljk!-Union{Tuple{FB}, Tuple{FA}, Tuple{T}, Tuple{Array{T, 4}, FA, FB}} where {T, FA, FB}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4iljk!","text":"tens4iljk!(t::Array{T, 4}, A::FA, B::FB) where {T, FA, FB}\n\nFill a 4th-order tensor as a dyadic product of two 2nd-order tensors.\n\nThe i,j,k,l component is given as t[i,j,k,l]=A(i,l)*B(j,k).\n\nnote: Note\n\n\nThe tensor is accumulated to. It needs to be initialized to zero, if that is desired as the initial state.\n\nExample\n\nt = fill(0.0, 3, 3, 3, 3)\ndelta = (I, J) -> I == J ? 1.0 : 0.0\ntens4iljk!(t, delta, delta)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\n@show S - tens4dot2!(tS, t, S)\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4skewor!-Union{Tuple{Array{T, 4}}, Tuple{T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4skewor!","text":"tens4skewor!(t::Array{T, 4}) where {T}\n\nCompute 4th-order skewor tensor.\n\nDouble contraction of a second order tensor with this fourth-order tensor produces the skew part of the second order tensor.\n\nExample\n\nThe product of the skewor tensor with the second-order tensor S is \n\nt = fill(0.0, 3, 3, 3, 3)\ntens4skewor!(t)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\ntens4dot2!(tS, t, S)\n@show (S - S')/2 * I - tS\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4symmetrizor!-Union{Tuple{Array{T, 4}}, Tuple{T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4symmetrizor!","text":"tens4symmetrizor!(t::Array{T, 4}) where {T}\n\nCompute 4th-order symmetrizor tensor.\n\nDouble contraction of a second order tensor with this fourth-order tensor produces the symmetric part of the second order tensor.\n\nExample\n\nThe product of the symmetrizor tensor with the second-order tensor S is \n\nt = fill(0.0, 3, 3, 3, 3)\ntens4symmetrizor!(t)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\ntens4dot2!(tS, t, S)\n@show (S + S')/2 * I - tS\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4symmt6x6tot!-Union{Tuple{T}, Tuple{Array{T, 4}, Matrix{T}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4symmt6x6tot!","text":"tens4symmt6x6tot!(ST::Array{T, 4}, M::Matrix{T}) where {T}\n\nConvert a symmetric 6 x 6 matrix to a symmetric 4th-order tensor.\n\n!!! Note The order corresponds to the arrangement of the components of stress (or strain) tensor, symmetric, three-dimensional, into a 6-component  vector.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4symmtto6x6t!-Union{Tuple{T}, Tuple{Matrix{T}, Array{T, 4}}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4symmtto6x6t!","text":"tens4symmtto6x6t!(M::Matrix{T}, ST::Array{T, 4}) where {T}\n\nConvert a symmetric 4th-order tensor to a 6 x 6 matrix.\n\n!!! Note The order corresponds to the arrangement of the components of stress (or strain) tensor, symmetric, three-dimensional, into a 6-component  vector.\n\nExample\n\nJ=tens4_ijkl(eye(3),eye(3))\nproduces the tracor:\nT=rand(3); \nsum(diag(T))*eye(3)\nt= tens4_dot_2(J,T)\nM= tens4_symm_to_6(ST)\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4tracor!-Union{Tuple{Array{T, 4}}, Tuple{T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4tracor!","text":"tens4tracor!(t::Array{T, 4}) where {T}\n\nCompute 4th-order tracor tensor.\n\nDouble contraction of a second order tensor with this fourth-order tensor produces the spherical part of the second order tensor.\n\nExample\n\nThe product of the tracor tensor with the second-order tensor S is \n\nt = fill(0.0, 3, 3, 3, 3)\ntens4tracor!(t)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\ntens4dot2!(tS, t, S)\n@show tr(S) * I - tS\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.tens4transposor!-Union{Tuple{Array{T, 4}}, Tuple{T}} where T","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.tens4transposor!","text":"tens4transposor!(t::Array{T, 4}) where {T}\n\nCompute 4th-order transposor tensor.\n\nExample\n\nThe product of the transposor tensor with the second-order tensor S is \n\nt = fill(0.0, 3, 3, 3, 3)\ntens4transposor!(t)\nS = rand(3, 3)\ntS = fill(0.0, 3, 3)\ntens4dot2!(tS, t, S)\n@show S' - tS\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule.AbstractMatDefor","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule.AbstractMatDefor","text":"AbstractMatDefor\n\nAbstract type that represents deformable materials.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#Elasticity","page":"Reference Manual","title":"Elasticity","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.MatDeforLinearElasticModule, ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforLinearElasticModule.tangentmoduli!-Union{Tuple{FT}, Tuple{AbstractMatDeforLinearElastic, Matrix{FT}, FT, FT, Matrix{FT}, Int64}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforLinearElasticModule.tangentmoduli!","text":"tangentmoduli!(self::AbstractMatDeforLinearElastic,  D::Matrix{FT},  t::FT, dt::FT, loc::Matrix{FT}, label::Int) where {FT}\n\nCalculate the material stiffness matrix.\n\nD = matrix of tangent moduli, supplied as a buffer and overwritten. Returned\n\nas output.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforLinearElasticModule.thermalstrain!-Union{Tuple{FT}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Any}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforLinearElasticModule.thermalstrain!","text":"thermalstrain!(self::AbstractMatDeforLinearElastic, thstrain::Vector{FT}, dT= 0.0) where {FT}\n\nCompute thermal strain from the supplied temperature increment.\n\nthstrain = thermal strain vector, supplied as buffer, returned as output.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforLinearElasticModule.update!-Union{Tuple{FT}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Vector{FT}, Vector{FT}}, Tuple{AbstractMatDeforLinearElastic, Vararg{Vector{FT}, 4}}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Vector{FT}, Vector{FT}, Vector{FT}, FT}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Vector{FT}, Vector{FT}, Vector{FT}, FT, FT}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Vector{FT}, Vector{FT}, Vector{FT}, FT, FT, Matrix{FT}}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Vector{FT}, Vector{FT}, Vector{FT}, FT, FT, Matrix{FT}, Int64}, Tuple{AbstractMatDeforLinearElastic, Vector{FT}, Vector{FT}, Vector{FT}, Vector{FT}, FT, FT, Matrix{FT}, Int64, Any}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforLinearElasticModule.update!","text":"update!(self::AbstractMatDeforLinearElastic,  stress::Vector{FT}, output::Vector{FT},  strain::Vector{FT}, thstrain::Vector{FT}=zeros(6), t::FT= 0.0, dt::FT= 0.0,  loc::Matrix{FT}=zeros(3,1), label::Int=0, quantity=:nothing) where {FT}\n\nUpdate material state.\n\nstrain = strain vector,\nthstrain = thermal strain vector,\nt = current time,\ndt = current time step,\nloc = location of the quadrature point in global Cartesian coordinates,\nlabel = label of the finite element in which the quadrature point is found.\n\nOutput\n\nstress = stress vector, allocated by the caller with a size of the number of stress and\n\nstrain components, nstressstrain. The components of the stress vector are calculated and stored in the stress vector.\n\noutput =  array which is (if necessary) allocated  in an appropriate size, filled with the output quantity, and returned.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforLinearElasticModule.AbstractMatDeforLinearElastic","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforLinearElasticModule.AbstractMatDeforLinearElastic","text":"AbstractMatDeforLinearElastic <: AbstractMatDefor\n\nAbstract Linear Elasticity  material.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#Isotropic-elasticity","page":"Reference Manual","title":"Isotropic elasticity","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools, FinEtoolsDeforLinear.MatDeforElastIsoModule, ]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso{MR<:AbstractDeforModelRed, MTAN<:Function, MUPD<:Function, MTHS<:Function} <: AbstractMatDeforLinearElastic\n\nLinear isotropic elasticity  material.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{FT}, Tuple{Type{DeforModelRed1DStrain}, NTuple{4, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{DeforModelRed1DStrain}, args::NTuple{4, FT}) where FT\n\nCreate elastic isotropic material for 1D models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{FT}, Tuple{Type{DeforModelRed1DStress}, NTuple{4, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{DeforModelRed1DStress}, args::NTuple{4, FT}) where FT\n\nCreate elastic isotropic material for 1D models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{FT}, Tuple{Type{DeforModelRed2DAxisymm}, NTuple{4, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{DeforModelRed2DAxisymm}, args::NTuple{4, FT}) where FT\n\nCreate elastic isotropic material for 2D axially symmetric models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{FT}, Tuple{Type{DeforModelRed2DStrain}, NTuple{4, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{DeforModelRed2DStrain}, args::NTuple{4, FT}) where FT\n\nCreate elastic isotropic material for 2D plane strain models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{FT}, Tuple{Type{DeforModelRed2DStress}, NTuple{4, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{DeforModelRed2DStress}, args::NTuple{4, FT}) where FT\n\nCreate elastic isotropic material for 2D plane stress models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{FT}, Tuple{Type{DeforModelRed3D}, NTuple{4, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{DeforModelRed3D}, args::NTuple{4, FT}) where FT\n\nCreate elastic isotropic material for 3D stress models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{N}, Tuple{MR}, Tuple{Type{MR}, N, N}} where {MR<:AbstractDeforModelRed, N<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{MR}, E, nu) where {MR}\n\nCreate isotropic elastic material with default mass density and thermal expansion.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso-Union{Tuple{N}, Tuple{MR}, Tuple{Type{MR}, Vararg{N, 4}}} where {MR<:AbstractDeforModelRed, N<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso","text":"MatDeforElastIso(mr::Type{MR}, mass_density, E, nu, CTE) where {MR<:AbstractDeforModelRed}\n\nCreate an isotropic elastic material providing all material parameters.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Orthotropic-elasticity","page":"Reference Manual","title":"Orthotropic elasticity","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"Modules = [FinEtools,  FinEtoolsDeforLinear.MatDeforElastOrthoModule,]\nPrivate = true\nOrder = [:function, :type]","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho{MR<:AbstractDeforModelRed,  MTAN<:Function, MUPD<:Function, MTHS<:Function} <: AbstractMatDeforLinearElastic\n\nLinear orthotropic elasticity  material.\n\n\n\n\n\n","category":"type"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{FT}, Tuple{Type{DeforModelRed2DAxisymm}, NTuple{13, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(mr::Type{DeforModelRed2DAxisymm}, args::NTuple{13, FT}) where FT\n\nCreate elastic orthotropic material for 2D axially symmetric models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{FT}, Tuple{Type{DeforModelRed2DStrain}, NTuple{13, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(mr::Type{DeforModelRed2DStrain}, args::NTuple{13, FT}) where FT\n\nCreate elastic orthotropic material for 2D plane strain models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{FT}, Tuple{Type{DeforModelRed2DStress}, NTuple{13, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(mr::Type{DeforModelRed2DStress}, args::NTuple{13, FT}) where FT\n\nCreate elastic orthotropic material for 2D plane stress models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{FT}, Tuple{Type{DeforModelRed3D}, NTuple{13, FT}}} where FT","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(mr::Type{DeforModelRed3D}, args::NTuple{13, FT}) where FT\n\nCreate elastic orthotropic material for 3D models.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{N}, Tuple{MR}, Tuple{Type{MR}, N, N}} where {MR<:AbstractDeforModelRed, N<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(\n    mr::Type{MR},\n    E::N,\n    nu::N,\n) where {MR<:AbstractDeforModelRed,N<:Number}\n\nCreate elastic orthotropic material which is really isotropic.\n\nConvenience version with only the specification of the elastic properties.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{N}, Tuple{MR}, Tuple{Type{MR}, Vararg{N, 13}}} where {MR<:AbstractDeforModelRed, N<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(\n    mr::Type{MR},\n    mass_density::N,\n    E1::N,\n    E2::N,\n    E3::N,\n    nu12::N,\n    nu13::N,\n    nu23::N,\n    G12::N,\n    G13::N,\n    G23::N,\n    CTE1::N,\n    CTE2::N,\n    CTE3::N,\n) where {MR<:AbstractDeforModelRed,N<:Number}\n\nCreate elastic orthotropic material.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{N}, Tuple{MR}, Tuple{Type{MR}, Vararg{N, 4}}} where {MR<:AbstractDeforModelRed, N<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(\n    mr::Type{MR},\n    mass_density::N,\n    E::N,\n    nu::N,\n    CTE::N,\n) where {MR<:AbstractDeforModelRed,N<:Number}\n\nCreate elastic orthotropic material which is really isotropic.\n\nConvenience version with only the specification of the elastic and thermal expansion properties.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho-Union{Tuple{N}, Tuple{MR}, Tuple{Type{MR}, Vararg{N, 9}}} where {MR<:AbstractDeforModelRed, N<:Number}","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule.MatDeforElastOrtho","text":"MatDeforElastOrtho(\n    mr::Type{MR},\n    E1::N,\n    E2::N,\n    E3::N,\n    nu12::N,\n    nu13::N,\n    nu23::N,\n    G12::N,\n    G13::N,\n    G23::N,\n) where {MR<:AbstractDeforModelRed,N<:Number}\n\nCreate elastic orthotropic material.\n\nConvenience version with only the specification of the elastic properties.\n\n\n\n\n\n","category":"method"},{"location":"man/man.html#Modules","page":"Reference Manual","title":"Modules","text":"","category":"section"},{"location":"man/man.html","page":"Reference Manual","title":"Reference Manual","text":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule\nFinEtoolsDeforLinear.FEMMDeforLinearBaseModule\nFinEtoolsDeforLinear.FinEtoolsDeforLinear\nFinEtoolsDeforLinear.FEMMDeforLinearMSModule\nFinEtoolsDeforLinear.MatDeforModule\nFinEtoolsDeforLinear.FEMMDeforLinearModule\nFinEtoolsDeforLinear.AlgoDeforLinearModule\nFinEtoolsDeforLinear.FEMMDeforLinearNICEModule\nFinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule\nFinEtoolsDeforLinear.MatDeforElastIsoModule\nFinEtoolsDeforLinear.MatDeforLinearElasticModule\nFinEtoolsDeforLinear.FEMMDeforWinklerModule\nFinEtoolsDeforLinear.MatDeforElastOrthoModule\nFinEtoolsDeforLinear.FEMMDeforLinearIMModule","category":"page"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearESNICEModule","text":"FEMMDeforLinearESNICEModule\n\nFormulation for the small displacement, small strain deformation model for Nodally-Integrated Continuum Elements (NICE).\n\nThe approximation is  originally from Dohrmann et al IJNME 47 (2000). The formulation was subsequently developed in Krysl, P. and Zhu, B. Locking-free continuum displacement finite elements with nodal integration, International Journal for Numerical Methods in Engineering, 76,7,1020-1043,2008.\n\nThe stabilization scheme comes from papers on energy-sampling stabilization for mean-strain elements (Krysl).\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearBaseModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearBaseModule","text":"AbstractFEMMDeforLinearBaseModule\n\nBase module for operations on interiors of domains to construct system matrices and system vectors for linear deformation models.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FinEtoolsDeforLinear","page":"Reference Manual","title":"FinEtoolsDeforLinear.FinEtoolsDeforLinear","text":"FinEtoolsDeforLinear (C) 2017-2024, Petr Krysl\n\nFinite Element tools.  Julia implementation  of the finite element method for continuum mechanics. Package for linear stress analysis problems.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearMSModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearMSModule","text":"FEMMDeforLinearMSModule\n\nModule for operations on interiors of domains to construct system matrices and system vectors for linear deformation models:  mean-strain  formulation.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforModule","text":"MatDeforModule\n\nModule to support general operations for deformation material models.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearModule","text":"FEMMDeforLinearModule\n\nModule for operations on interiors of domains to construct system matrices and system vectors for linear deformation models.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.AlgoDeforLinearModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.AlgoDeforLinearModule","text":"AlgoDeforLinearModule\n\nModule for algorithms used in linear deformation models.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearNICEModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearNICEModule","text":"FEMMDeforLinearNICEModule\n\nFormulation for the small displacement, small strain deformation model for Nodally-Integrated Continuum Elements (NICE).\n\nThe approximation is  originally from Dohrmann et al IJNME 47 (2000). The formulation was subsequently developed in Krysl, P. and Zhu, B. Locking-free continuum displacement finite elements with nodal integration, International Journal for Numerical Methods in Engineering, 76,7,1020-1043,2008.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforSurfaceDampingModule","text":"FEMMDeforSurfaceDampingModule\n\nModule for operations on the damping associated with absorbing boundary  conditions (ABC) representation of the effect of infinite extent  of inviscid fluid next to the surface.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforWinklerModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforWinklerModule","text":"FEMMDeforWinklerModule\n\nModule for operations on boundaries of domains to construct system matrices and system vectors for linear deformation models with distributed-spring supports (Winkler foundation model).\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.MatDeforElastOrthoModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.MatDeforElastOrthoModule","text":"MatDeforElastOrthoModule\n\nModule for  orthotropic elastic material.\n\n\n\n\n\n","category":"module"},{"location":"man/man.html#FinEtoolsDeforLinear.FEMMDeforLinearIMModule","page":"Reference Manual","title":"FinEtoolsDeforLinear.FEMMDeforLinearIMModule","text":"FEMMDeforLinearIMModule\n\nModule for operations on interiors of domains to construct system matrices and system vectors for linear deformation models: incompatible-mode formulation.\n\n\n\n\n\n","category":"module"}]
}
